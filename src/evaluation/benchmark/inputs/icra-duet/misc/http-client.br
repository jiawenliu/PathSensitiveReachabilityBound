#line 70
  index___0 = 0;
#line 70
  while (index___0 < numThread) {
#line 72
    pthread_id[index___0] = index___0;
#line 73
    rtnValue = pthread_create((pthread_t * __restrict  )(& threadArr[index___0]),
                              (pthread_attr_t const   * __restrict  )((void *)0),
                              & send_request, (void * __restrict  )(& pthread_id[index___0]));
#line 75
    if (rtnValue) {
#line 77
      sprintf((char * __restrict  )(message), (char const   * __restrict  )"pthread_create() fails with error code %d",
              rtnValue);
#line 78
      print_system_error(message);
    }
#line 70
    index___0 ++;
  }


#line 83
  index___0 = 0;
#line 83
  while (index___0 < numThread) {
#line 85
    rtnValue = pthread_join(threadArr[index___0], & status);
#line 83
    index___0 ++;
  }

#line 104
  tmp = 4U;
#line 104
  while (! (tmp >= 100U)) {
#line 104
    end[tmp] = (char)0;
#line 104
    tmp ++;
  }
#line 108
  curNumRequest = 0;
#line 108
  while (curNumRequest < 30) {
#line 110
    clientSocket = socket(2, 1, 6);
#line 111
    if (clientSocket < 0) {
#line 112
      print_system_error((char *)"socket() fails");
    }
#line 115
    tmp___0 = connect(clientSocket, (struct sockaddr  const  *)((struct sockaddr *)(& serverAddr)),
                      (socklen_t )sizeof(serverAddr));
#line 115
    if (tmp___0 < 0) {
#line 120
      pthread_mutex_lock(& mutex_print);
#line 121
      numFailConn ++;
#line 122
      pthread_mutex_unlock(& mutex_print);
#line 123
      goto __Cont;
    }
#line 127
    request = generate_request();
#line 128
    tmp___1 = strlen((char const   *)request);
#line 128
    lenRequest = (int )tmp___1;
#line 130
    numByte = send(clientSocket, (void const   *)request, (size_t )lenRequest, 0);
#line 131
    if (numByte < 0L) {
#line 132
      print_system_error((char *)"send() fails");
    } else
#line 134
    if (numByte != (ssize_t )lenRequest) {
#line 135
      print_user_error((char *)"send()", (char *)"sent unexpected number of bytes");
    }
#line 136
    shutdown(clientSocket, 1);
#line 139
    relative_buffer = buffer;
#line 140
    lenBuffer = 10000;
#line 141
    flagFailRecv = 0;
#line 142
    while (1) {
#line 144
      numByteRecv = recv(clientSocket, (void *)relative_buffer, (size_t )(lenBuffer - 1),
                         0);
#line 145
      if (numByteRecv < 0L) {
#line 147
        flagFailRecv = 1;
#line 148
        break;
      } else
#line 152
      if (numByteRecv > 0L) {
#line 154
        relative_buffer += numByteRecv;
#line 155
        lenBuffer = (int )((ssize_t )lenBuffer - numByteRecv);
      } else {
#line 158
        *(relative_buffer + 0) = (char )'\000';
      }
#line 142
      if (! (numByteRecv > 0L)) {
#line 142
        break;
      }
    }
#line 163
    close(clientSocket);
#line 166
    pthread_mutex_lock(& mutex_print);
#line 168
    if (flagFailRecv) {
#line 169
      numFailRecv ++;
    } else {
#line 172
      printf((char const   * __restrict  )"Client thread with id = %d sends request %d\n",
             id, curNumRequest + 1);
#line 173
      printf((char const   * __restrict  )"Response from the server:\n");
#line 173
      printf((char const   * __restrict  )"%s", buffer);
    }
#line 176
    pthread_mutex_unlock(& mutex_print);
#line 177
    free((void *)request);
    __Cont: /* CIL Label */ 
#line 108
    curNumRequest ++;
  }


#line 21
  index___0 = 0;
#line 21
  while (index___0 < numStr) {
#line 23
    tmp = strcasecmp((char const   *)*(strArr + index___0), (char const   *)str);
#line 23
    if (tmp == 0) {
#line 24
      return (index___0);
    }
#line 21
    index___0 ++;
  }

#line 35
  index___0 = 0;
#line 35
  curr_occur = 0;
#line 35
  while ((int )*(str + index___0) != 0) {
#line 36
    if ((int )*(str + index___0) == (int )character) {
#line 38
      curr_occur ++;
#line 39
      if (curr_occur == occurence) {
#line 40
        return (index___0);
      }
    }
#line 35
    index___0 ++;
  }

#line 84
    index___0 = 0;
#line 84
    while ((int )*(str + index___0) != 0) {
#line 85
      if ((int )*(str + index___0) == (int )character) {
#line 86
        num ++;
      }
#line 84
      index___0 ++;
    }
