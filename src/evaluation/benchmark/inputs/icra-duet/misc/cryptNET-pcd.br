#line 972
  __result = (size_t )0;
#line 973
  while (1) {
#line 973
    if ((int const   )*(__s + __result) != 0) {
#line 973
      if (! ((int const   )*(__s + __result) != (int const   )__reject)) {
#line 973
        break;
      }
    } else {
#line 973
      break;
    }
#line 974
    __result ++;
  }

#line 983
  __result = (size_t )0;
#line 984
  while (1) {
#line 984
    if ((int const   )*(__s + __result) != 0) {
#line 984
      if ((int const   )*(__s + __result) != (int const   )__reject1) {
#line 984
        if (! ((int const   )*(__s + __result) != (int const   )__reject2)) {
#line 984
          break;
        }
      } else {
#line 984
        break;
      }
    } else {
#line 984
      break;
    }
#line 986
    __result ++;
  }


  __result = (size_t )0;
#line 997
  while (1) {
#line 997
    if ((int const   )*(__s + __result) != 0) {
#line 997
      if ((int const   )*(__s + __result) != (int const   )__reject1) {
#line 997
        if ((int const   )*(__s + __result) != (int const   )__reject2) {
#line 997
          if (! ((int const   )*(__s + __result) != (int const   )__reject3)) {
#line 997
            break;
          }
        } else {
#line 997
          break;
        }
      } else {
#line 997
        break;
      }
    } else {
#line 997
      break;
    }
#line 999
    __result ++;
  }


#line 1048
  __result = (size_t )0;
#line 1050
  while ((int const   )*(__s + __result) == (int const   )__accept) {
#line 1051
    __result ++;
  }


#line 1060
  __result = (size_t )0;
#line 1062
  while (1) {
#line 1062
    if (! ((int const   )*(__s + __result) == (int const   )__accept1)) {
#line 1062
      if (! ((int const   )*(__s + __result) == (int const   )__accept2)) {
#line 1062
        break;
      }
    }
#line 1063
    __result ++;
  }

#line 1072
  __result = (size_t )0;
#line 1074
  while (1) {
#line 1074
    if (! ((int const   )*(__s + __result) == (int const   )__accept1)) {
#line 1074
      if (! ((int const   )*(__s + __result) == (int const   )__accept2)) {
#line 1074
        if (! ((int const   )*(__s + __result) == (int const   )__accept3)) {
#line 1074
          break;
        }
      }
    }
#line 1076
    __result ++;
  }


#line 1126
  while (1) {
#line 1126
    if ((int const   )*__s != 0) {
#line 1126
      if ((int const   )*__s != (int const   )__accept1) {
#line 1126
        if (! ((int const   )*__s != (int const   )__accept2)) {
#line 1126
          break;
        }
      } else {
#line 1126
        break;
      }
    } else {
#line 1126
      break;
    }
#line 1127
    __s ++;
  }


#line 1137
  while (1) {
#line 1137
    if ((int const   )*__s != 0) {
#line 1137
      if ((int const   )*__s != (int const   )__accept1) {
#line 1137
        if ((int const   )*__s != (int const   )__accept2) {
#line 1137
          if (! ((int const   )*__s != (int const   )__accept3)) {
#line 1137
            break;
          }
        } else {
#line 1137
          break;
        }
      } else {
#line 1137
        break;
      }
    } else {
#line 1137
      break;
    }
#line 1139
    __s ++;
  }


#line 1175
  if ((unsigned long )__s == (unsigned long )((void *)0)) {
#line 1176
    __s = *__nextp;
  }
#line 1177
  while ((int )*__s == (int )__sep) {
#line 1178
    __s ++;
  }
#line 1179
  __result = (char *)((void *)0);
#line 1180
  if ((int )*__s != 0) {
#line 1182
    tmp = __s;
#line 1182
    __s ++;
#line 1182
    __result = tmp;
#line 1183
    while ((int )*__s != 0) {
#line 1184
      tmp___0 = __s;
#line 1184
      __s ++;
#line 1184
      if ((int )*tmp___0 == (int )__sep) {
#line 1186
        *(__s + -1) = (char )'\000';
#line 1187
        break;
      }
    }
  }


#line 1238
    while (1) {
#line 1240
      if ((int )*__cp == 0) {
#line 1242
        __cp = (char *)((void *)0);
#line 1243
        break;
      }
#line 1245
      if ((int )*__cp == (int )__reject1) {
#line 1247
        tmp = __cp;
#line 1247
        __cp ++;
#line 1247
        *tmp = (char )'\000';
#line 1248
        break;
      } else
#line 1245
      if ((int )*__cp == (int )__reject2) {
#line 1247
        tmp = __cp;
#line 1247
        __cp ++;
#line 1247
        *tmp = (char )'\000';
#line 1248
        break;
      }
#line 1250
      __cp ++;
    }



#line 78
    arg = 1;
#line 78
    while (arg < argc) {
#line 80
      if ((int )*(*(argv + arg) + 0) == 45) {
#line 82
        if ((int )*(*(argv + arg) + 1) == 45) {
#line 84
          tmp___3 = strstr((char const   *)*(argv + arg), "help");
#line 84
          if ((unsigned long )tmp___3 != (unsigned long )((void *)0)) {
#line 86
            printf((char const   * __restrict  )"Usage: cpcd\n");
#line 87
            printf((char const   * __restrict  )"\t-v Verbose Mode\n");
#line 88
            printf((char const   * __restrict  )"\t-h This Help Text\n");
#line 89
            printf((char const   * __restrict  )"\t--help This Help Text\n");
#line 90
            printf((char const   * __restrict  )"\t--version Display Version Information\n");
#line 91
            printf((char const   * __restrict  )"\n");
#line 92
            free_context(ctx);
#line 94
            return (0);
          } else {
#line 96
            tmp___2 = strstr((char const   *)*(argv + arg), "version");
#line 96
            if ((unsigned long )tmp___2 != (unsigned long )((void *)0)) {
#line 98
              printf((char const   * __restrict  )"%s\n", (ctx->config)->cpcd_version);
#line 99
              free_context(ctx);
#line 101
              return (0);
            }
          }
        } else
#line 104
        if ((int )*(*(argv + arg) + 1) == 118) {
#line 106
          ctx->verbose = 1;
        } else {
#line 110
          printf((char const   * __restrict  )"Usage: cpcd\n");
#line 111
          printf((char const   * __restrict  )"\t-v Verbose Mode\n");
#line 112
          printf((char const   * __restrict  )"\t-h This Help Text\n");
#line 113
          printf((char const   * __restrict  )"\t--help This Help Text\n");
#line 114
          printf((char const   * __restrict  )"\t--version Display Version Information\n");
#line 115
          printf((char const   * __restrict  )"\n");
#line 116
          free_context(ctx);
#line 118
          return (0);
        }
      }
#line 78
      arg ++;
    }



#line 182
  i = 0;
#line 182
  while (i < (ctx->config)->listen_threads) {
#line 184
    pthread_create((pthread_t * __restrict  )(tptr + i), (pthread_attr_t const   * __restrict  )((void *)0),
                   & thread_main, (void * __restrict  )((void *)0));
#line 182
    i ++;
  }


#line 187
  i = 0;
#line 187
  while (i < (ctx->config)->host_threads) {
#line 189
    pthread_create((pthread_t * __restrict  )(vtptr + i), (pthread_attr_t const   * __restrict  )((void *)0),
                   & ip_verify_thread_main, (void * __restrict  )((void *)0));
#line 187
    i ++;
  }


#line 194
  while (ctx->exit_flag != 1) {
#line 196
    pause();
  }

#line 217
    i = 0;
#line 217
    while (i < (ctx->config)->listen_threads) {
#line 219
      if ((unsigned long )(tptr + i) != (unsigned long )((void *)0)) {
#line 221
        pthread_cancel(*(tptr + i));
#line 222
        pthread_join(*(tptr + i), (void **)((void *)0));
      }
#line 217
      i ++;
    }


#line 229
    i = 0;
#line 229
    while (i < (ctx->config)->host_threads) {
#line 231
      if ((unsigned long )(vtptr + i) != (unsigned long )((void *)0)) {
#line 233
        pthread_cancel(*(vtptr + i));
#line 234
        pthread_join(*(vtptr + i), (void **)((void *)0));
      }
#line 229
      i ++;
    }


#line 299
  while (ctx->exit_flag != 1) {
#line 302
    c = accept(listenfd, (struct sockaddr * __restrict  )(& cliaddr), (socklen_t * __restrict  )(& inet_length));
#line 303
    if (c == -1) {
#line 305
      continue;
    }
#line 308
    (ctx->total_hits) ++;
#line 309
    if (ctx->verbose == 1) {
#line 311
      if (ctx->total_hits % 100UL == 0UL) {
#line 313
        printf((char const   * __restrict  )"Total Hits: %ln\n", & ctx->total_hits);
      }
    }
#line 317
    accept_connect(c, ctx->config);
#line 319
    shutdown(c, 2);
#line 320
    close(c);
  }



#line 329
  i = 0U;
#line 332
  while (ctx->exit_flag != 1) {
#line 334
    i = 0U;
#line 334
    while (i < 100U) {
#line 336
      if (ctx->exit_flag == 1) {
#line 338
        break;
      } else {
#line 342
        sleep(3U);
      }
#line 334
      i ++;
    }
#line 345
    write_files();
  }


#line 358
  walk_net = get_first_network(ctx->networks);
#line 359
  while ((unsigned long )walk_net != (unsigned long )((void *)0)) {
#line 361
    write_file(ctx->config, walk_net->hosts, walk_net->name);
#line 363
    walk_net = walk_net->next;
  }



#line 377
  while (ctx->exit_flag != 1) {
#line 379
    pthread_mutex_lock(& ip_queue_mutex);
#line 380
    tmp = pop_entry(& ctx->host_queue);
#line 380
    work_item = tmp;
#line 381
    pthread_mutex_unlock(& ip_queue_mutex);
#line 382
    if ((unsigned long )work_item == (unsigned long )((void *)0)) {
#line 384
      sleep(1U);
    } else {
#line 388
      process_node(work_item);
#line 389
      free_queue_item(work_item);
    }
  }



#line 452
  while (ctx->exit_flag != 1) {
#line 454
    pthread_mutex_lock(& url_queue_mutex);
#line 455
    tmp = pop_entry(& ctx->url_queue);
#line 455
    work_item = tmp;
#line 456
    pthread_mutex_unlock(& url_queue_mutex);
#line 457
    if ((unsigned long )work_item == (unsigned long )((void *)0)) {
#line 459
      sleep(1U);
    } else {
#line 463
      process_url(work_item);
#line 464
      free_queue_item(work_item);
    }
  }



#line 696
    while (1) {
#line 698
      rslt = read_line(c, (unsigned char *)(bufftrash), 255U);
#line 696
      if ((int )bufftrash[0] == 10) {
#line 696
        goto _L___0;
      } else
#line 696
      if ((int )bufftrash[0] == 13) {
        _L___0: /* CIL Label */ 
#line 696
        tmp___3 = strlen((char const   *)(bufftrash));
#line 696
        if (tmp___3 < 3UL) {
#line 696
          break;
        } else {
#line 696
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
#line 696
      if (! (rslt > 2)) {
#line 696
        break;
      }
    }

#line 1565
  while (1) {
#line 1567
    rslt = read_line(sockfd, (unsigned char *)(tmp_buffer), (unsigned int )sizeof(tmp_buffer));
#line 1568
    rslt2 = memcmp((void const   *)"X-Try-Ultrapeers: ", (void const   *)(tmp_buffer),
                   (size_t )18);
#line 1569
    if (rslt2 == 0) {
#line 1571
      process_ultrapeers(tmp_buffer, current_network);
    }
#line 1565
    if ((int )tmp_buffer[0] != 13) {
#line 1565
      if ((int )tmp_buffer[0] != 10) {
#line 1565
        if (! (rslt > 2)) {
#line 1565
          break;
        }
      } else {
#line 1565
        break;
      }
    } else {
#line 1565
      break;
    }
  }


#line 1627
    tmp___2 = __strtok_r((char * __restrict  )n, (char const   * __restrict  )",",
                         (char ** __restrict  )(& p));
#line 1627
    node = tmp___2;
#line 1628
    while (1) {
#line 1630
      process_update(node, (char *)((void *)0), current_network);
#line 1628
      tmp___4 = __strtok_r((char * __restrict  )'\000', (char const   * __restrict  )",",
                           (char ** __restrict  )(& p));
#line 1628
      node = tmp___4;
#line 1628
      if (! node) {
#line 1628
        break;
      }
    }


#line 127
  while ((unsigned long )the_queue->next != (unsigned long )((void *)0)) {
#line 129
    the_queue = the_queue->next;
#line 130
    i ++;
  }


#line 311
  while ((unsigned long )walk_host != (unsigned long )((void *)0)) {
#line 313
    if (type == 3) {
#line 313
      if ((int )walk_host->type == 85) {
#line 315
        return (walk_host);
      } else {
#line 313
        goto _L___0;
      }
    } else
    _L___0: /* CIL Label */ 
#line 317
    if (type == 2) {
#line 317
      if ((int )walk_host->type == 72) {
#line 319
        return (walk_host);
      }
    }
#line 322
    walk_host = walk_host->next;
  }



#line 401
  if (type == 3) {
#line 403
    while ((unsigned long )walk_host != (unsigned long )((void *)0)) {
#line 405
      if ((int )walk_host->type == 85) {
#line 407
        count ++;
      }
#line 410
      walk_host = walk_host->next;
    }
  } else
#line 413
  if (type == 2) {
#line 415
    while ((unsigned long )walk_host != (unsigned long )((void *)0)) {
#line 417
      if ((int )walk_host->type == 72) {
#line 419
        count ++;
      }
#line 422
      walk_host = walk_host->next;
    }
  } else {
#line 427
    while ((unsigned long )walk_host != (unsigned long )((void *)0)) {
#line 429
      count ++;
#line 431
      walk_host = walk_host->next;
    }
  }


#line 622
    tmp = get_first_host(cached_hosts);
#line 622
    walk_host = tmp;
#line 623
    while ((unsigned long )walk_host != (unsigned long )((void *)0)) {
#line 625
      next_host = walk_host->next;
#line 626
      if ((unsigned long )walk_host->addr != (unsigned long )((void *)0)) {
#line 628
        free((void *)walk_host->addr);
#line 629
        walk_host->addr = (unsigned char *)((void *)0);
      }
#line 631
      free((void *)walk_host);
#line 632
      walk_host = next_host;
    }


#line 39
  while ((unsigned long )walk_host != (unsigned long )((void *)0)) {
#line 41
    if ((int )walk_host->type == 85) {
#line 43
      age = (unsigned long )now - walk_host->bdate;
#line 44
      if (age > 86400UL) {
#line 45
        return (1);
      }
    }
#line 47
    walk_host = walk_host->next;
  }


#line 148
    while (1) {
#line 148
      if (! ((int )*(file + 0) == 46)) {
#line 148
        if (! ((int )*(file + 0) == 47)) {
#line 148
          break;
        }
      }
#line 150
      file ++;
    }


#line 282
    while (1) {
#line 282
      if (! ((int )*(file + 0) == 46)) {
#line 282
        if (! ((int )*(file + 0) == 47)) {
#line 282
          break;
        }
      }
#line 284
      file ++;
    }


#line 409
  while (1) {
#line 411
    rslt = read_line(sockfd, (unsigned char *)(tmp_buffer), (unsigned int )sizeof(tmp_buffer));
#line 412
    if (rslt < 2) {
#line 414
      shutdown(sockfd, 2);
#line 415
      close(sockfd);
#line 417
      return (-1);
    }
#line 409
    if ((int )tmp_buffer[0] != 13) {
#line 409
      if (! ((int )tmp_buffer[0] != 10)) {
#line 409
        break;
      }
    } else {
#line 409
      break;
    }
  }


#line 524
  while (1) {
#line 526
    rslt = read_line(sockfd, (unsigned char *)(tmp_buffer), (unsigned int )sizeof(tmp_buffer));
#line 527
    if (rslt < 2) {
#line 529
      shutdown(sockfd, 2);
#line 530
      close(sockfd);
#line 531
      return (-1);
    }
#line 524
    if ((int )tmp_buffer[0] != 13) {
#line 524
      if (! ((int )tmp_buffer[0] != 10)) {
#line 524
        break;
      }
    } else {
#line 524
      break;
    }
  }


#line 668
  while ((unsigned long )walk_cached_hosts != (unsigned long )((void *)0)) {
#line 670
    if ((unsigned long )walk_cached_hosts->addr != (unsigned long )((void *)0)) {
#line 672
      rslt = fprintf((FILE * __restrict  )data, (char const   * __restrict  )"%c|%s|%ln|\n",
                     (int )walk_cached_hosts->type, walk_cached_hosts->addr, & walk_cached_hosts->bdate);
#line 673
      if (rslt < 1) {
#line 675
        fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Error writing file. Disk may be full.\n");
#line 676
        remove((char const   *)(tmp_file_path));
#line 678
        return (-1);
      }
    }
#line 682
    walk_cached_hosts = walk_cached_hosts->next;
  }


#line 713
  tmp___0 = __strtok_r((char * __restrict  )(nets), (char const   * __restrict  )" ",
                       (char ** __restrict  )(& p));
#line 713
  net = tmp___0;
#line 714
  while (1) {
#line 716
    rslt = load_network_cache(ctx___0, net);
#line 714
    tmp___2 = __strtok_r((char * __restrict  )'\000', (char const   * __restrict  )" ",
                         (char ** __restrict  )(& p));
#line 714
    net = tmp___2;
#line 714
    if (! net) {
#line 714
      break;
    }
  }



#line 847
  i = 0;
#line 847
  while (i < 10) {
#line 849
    if (ctx___0->exit_flag == 1) {
#line 851
      return (-1);
    } else {
#line 855
      rslt = connect(*skt, (struct sockaddr  const  *)addr, len);
#line 856
      if (rslt == 0) {
#line 859
        fcntl(*skt, 4, flags);
#line 860
        return (0);
      } else
#line 862
      if (rslt == -1) {
#line 864
        tmp = __errno_location();
#line 864
        if (*tmp != 115) {
#line 867
          return (-1);
        }
      }
#line 871
      sleep(1U);
    }
#line 847
    i ++;
  }



#line 916
    n = 1U;
#line 916
    while (n < read_len) {
#line 918
      tmp___0 = read(skt, (void *)(& c), (size_t )1);
#line 918
      rc = (unsigned int )tmp___0;
#line 918
      if (rc == 1U) {
#line 920
        tmp = ptr;
#line 920
        ptr ++;
#line 920
        *tmp = c;
#line 921
        if ((int )c == 10) {
#line 923
          break;
        }
      } else
#line 926
      if (rc == 0U) {
#line 928
        if (n == 1U) {
#line 930
          return (0);
        } else {
#line 934
          break;
        }
      } else {
#line 939
        return (-1);
      }
#line 916
      n ++;
    }


#line 985
    while ((unsigned int )status != count) {
#line 987
      tmp___0 = write(skt, (void const   *)(the_line + status), (size_t )(count - (unsigned int )status));
#line 987
      result = (int )tmp___0;
#line 988
      if (result < 0) {
#line 988
        return (result);
      }
#line 989
      status += result;
    }



#line 1035
  while (*(*string + i)) {
#line 1037
    if (sizeof(*(*string + i)) > 1UL) {
#line 1037
      __res = tolower((int )*(*string + i));
    } else {
#line 1037
      tmp___0 = __ctype_tolower_loc();
#line 1037
      __res = (int )*(*tmp___0 + (int )*(*string + i));
    }
#line 1037
    *(*string + i) = (char )__res;
#line 1038
    i ++;
  }


#line 190
    while ((unsigned long )walk_cached_hosts != (unsigned long )((void *)0)) {
#line 192
      if ((int )walk_cached_hosts->type == 72) {
#line 194
        rslt = get_age_r((long *)(& walk_cached_hosts->bdate), & tmpdate_ptr, buff_size);
#line 195
        if (rslt != -1) {
#line 197
          snprintf((char * __restrict  )(buff), (size_t )255, (char const   * __restrict  )"<TR><TD><A HREF=\"http://%s\">%s</A></TD><TD>%s</TD></TR>\n",
                   walk_cached_hosts->addr, walk_cached_hosts->addr, tmpdate_ptr);
#line 199
          rslt = write_line_to_socket(c, buff);
        }
      }
#line 203
      walk_cached_hosts = walk_cached_hosts->next;
    }



#line 211
    walk_cached_hosts = get_first_host(current_network->hosts);
#line 213
    while ((unsigned long )walk_cached_hosts != (unsigned long )((void *)0)) {
#line 215
      if ((int )walk_cached_hosts->type == 85) {
#line 217
        rslt = get_age_r((long *)(& walk_cached_hosts->bdate), & tmpdate_ptr, buff_size);
#line 218
        if (rslt != -1) {
#line 220
          snprintf((char * __restrict  )(buff), (size_t )255, (char const   * __restrict  )"<TR><TD><A HREF=\"%s\">%s</A></TD><TD>%s</TD></TR>\n",
                   walk_cached_hosts->addr, walk_cached_hosts->addr, tmpdate_ptr);
#line 222
          rslt = write_line_to_socket(c, buff);
#line 223
          if (rslt == -1) {
#line 224
            return ((long )rslt);
          } else {
#line 226
            total_bytes += (unsigned long )rslt;
          }
        }
      }
#line 229
      walk_cached_hosts = walk_cached_hosts->next;
    }


#line 136
  the_list = get_first_pair(the_list);
#line 138
  while ((unsigned long )the_list != (unsigned long )((void *)0)) {
#line 140
    if (0) {
#line 140
      __s1_len = __builtin_strlen((char const   *)the_list->name);
#line 140
      __s2_len = __builtin_strlen((char const   *)name);
#line 140
      if (! ((size_t )((void const   *)(the_list->name + 1)) - (size_t )((void const   *)the_list->name) == 1UL)) {
#line 140
        goto _L___0;
      } else
#line 140
      if (__s1_len >= 4UL) {
        _L___0: /* CIL Label */ 
#line 140
        if (! ((size_t )((void const   *)(name + 1)) - (size_t )((void const   *)name) == 1UL)) {
#line 140
          tmp___5 = 1;
        } else
#line 140
        if (__s2_len >= 4UL) {
#line 140
          tmp___5 = 1;
        } else {
#line 140
          tmp___5 = 0;
        }
      } else {
#line 140
        tmp___5 = 0;
      }
#line 140
      if (tmp___5) {
#line 140
        tmp___0 = __builtin_strcmp((char const   *)the_list->name, (char const   *)name);
#line 140
        tmp___4 = tmp___0;
      } else {
#line 140
        tmp___3 = __builtin_strcmp((char const   *)the_list->name, (char const   *)name);
#line 140
        tmp___4 = tmp___3;
      }
    } else {
#line 140
      tmp___3 = __builtin_strcmp((char const   *)the_list->name, (char const   *)name);
#line 140
      tmp___4 = tmp___3;
    }
#line 140
    if (tmp___4 == 0) {
#line 142
      return ((char *)the_list->value);
    } else {
#line 146
      the_list = the_list->next;
    }
  }




#line 162
    tmp = get_first_pair(the_list);
#line 162
    walk_pair = tmp;
#line 163
    while ((unsigned long )walk_pair != (unsigned long )((void *)0)) {
#line 166
      next_pair = walk_pair->next;
#line 167
      if ((unsigned long )walk_pair->name != (unsigned long )((void *)0)) {
#line 170
        free((void *)walk_pair->name);
#line 171
        walk_pair->name = (unsigned char *)((void *)0);
      }
#line 173
      if ((unsigned long )walk_pair->value != (unsigned long )((void *)0)) {
#line 176
        free((void *)walk_pair->value);
#line 177
        walk_pair->value = (unsigned char *)((void *)0);
      }
#line 179
      free((void *)walk_pair);
#line 180
      walk_pair = next_pair;
    }


#line 162
    tmp = get_first_pair(the_list);
#line 162
    walk_pair = tmp;
#line 163
    while ((unsigned long )walk_pair != (unsigned long )((void *)0)) {
#line 166
      next_pair = walk_pair->next;
#line 167
      if ((unsigned long )walk_pair->name != (unsigned long )((void *)0)) {
#line 170
        free((void *)walk_pair->name);
#line 171
        walk_pair->name = (unsigned char *)((void *)0);
      }
#line 173
      if ((unsigned long )walk_pair->value != (unsigned long )((void *)0)) {
#line 176
        free((void *)walk_pair->value);
#line 177
        walk_pair->value = (unsigned char *)((void *)0);
      }
#line 179
      free((void *)walk_pair);
#line 180
      walk_pair = next_pair;
    }



#line 182
  p = s;
#line 182
  while (1) {
#line 182
    if (! error) {
#line 182
      if (! ((int )*s != 0)) {
#line 182
        break;
      }
    } else {
#line 182
      break;
    }
#line 184
    if ((int )*s == 37) {
#line 186
      s ++;
#line 187
      tmp___3 = __builtin_strchr((char *)hex, (int )*s);
#line 187
      match = tmp___3;
#line 187
      if ((unsigned long )match != (unsigned long )((void *)0)) {
#line 189
        ascii = (unsigned int )(match - (char *)hex);
#line 191
        s ++;
#line 192
        tmp___1 = __builtin_strchr((char *)hex, (int )*s);
#line 192
        match = tmp___1;
#line 192
        if ((unsigned long )match != (unsigned long )((void *)0)) {
#line 194
          ascii <<= 4;
#line 195
          ascii |= (unsigned int )(match - (char *)hex);
#line 197
          tmp = p;
#line 197
          p ++;
#line 197
          *tmp = (char )ascii;
        }
      }
    } else
#line 201
    if ((int )*s == 43) {
#line 203
      tmp___4 = p;
#line 203
      p ++;
#line 203
      *tmp___4 = (char )' ';
    } else {
#line 207
      tmp___5 = p;
#line 207
      p ++;
#line 207
      *tmp___5 = *s;
    }
#line 182
    s ++;
  }


