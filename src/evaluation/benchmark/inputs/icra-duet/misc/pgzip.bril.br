#line 972
  __result = (size_t )0;
#line 973
  while (1) {
#line 973
    if ((int const   )*(__s + __result) != 0) {
#line 973
      if (! ((int const   )*(__s + __result) != (int const   )__reject)) {
#line 973
        break;
      }
    } else {
#line 973
      break;
    }
#line 974
    __result ++;
  }


#line 983
  __result = (size_t )0;
#line 984
  while (1) {
#line 984
    if ((int const   )*(__s + __result) != 0) {
#line 984
      if ((int const   )*(__s + __result) != (int const   )__reject1) {
#line 984
        if (! ((int const   )*(__s + __result) != (int const   )__reject2)) {
#line 984
          break;
        }
      } else {
#line 984
        break;
      }
    } else {
#line 984
      break;
    }
#line 986
    __result ++;
  }




#line 996
  __result = (size_t )0;
#line 997
  while (1) {
#line 997
    if ((int const   )*(__s + __result) != 0) {
#line 997
      if ((int const   )*(__s + __result) != (int const   )__reject1) {
#line 997
        if ((int const   )*(__s + __result) != (int const   )__reject2) {
#line 997
          if (! ((int const   )*(__s + __result) != (int const   )__reject3)) {
#line 997
            break;
          }
        } else {
#line 997
          break;
        }
      } else {
#line 997
        break;
      }
    } else {
#line 997
      break;
    }
#line 999
    __result ++;
  }



#line 1048
  __result = (size_t )0;
#line 1050
  while ((int const   )*(__s + __result) == (int const   )__accept) {
#line 1051
    __result ++;
  }


#line 1060
  __result = (size_t )0;
#line 1062
  while (1) {
#line 1062
    if (! ((int const   )*(__s + __result) == (int const   )__accept1)) {
#line 1062
      if (! ((int const   )*(__s + __result) == (int const   )__accept2)) {
#line 1062
        break;
      }
    }
#line 1063
    __result ++;
  }


#line 1126
  while (1) {
#line 1126
    if ((int const   )*__s != 0) {
#line 1126
      if ((int const   )*__s != (int const   )__accept1) {
#line 1126
        if (! ((int const   )*__s != (int const   )__accept2)) {
#line 1126
          break;
        }
      } else {
#line 1126
        break;
      }
    } else {
#line 1126
      break;
    }
#line 1127
    __s ++;
  }


#line 1176
    __s = *__nextp;
  }
#line 1177
  while ((int )*__s == (int )__sep) {
#line 1178
    __s ++;
  }


#line 1182
    __result = tmp;
#line 1183
    while ((int )*__s != 0) {
#line 1184
      tmp___0 = __s;
#line 1184
      __s ++;
#line 1184
      if ((int )*tmp___0 == (int )__sep) {
#line 1186
        *(__s + -1) = (char )'\000';
#line 1187
        break;
      }
    }










#line 94
  i = 10;
#line 95
  while (1) {
#line 95
    *(headerbuffer + i) = *p;
#line 95
    i ++;
#line 95
    tmp___2 = p;
#line 95
    p ++;
#line 95
    if (! *tmp___2) {
#line 95
      break;
    }
  }




#line 143
  total_bytes_read = 0U;
#line 144
  total_bytes_left = size;
#line 146
  while (total_bytes_left != 0U) {
#line 148
    tmp = read(gc->ifd, (void *)(buf + total_bytes_read), (size_t )total_bytes_left);
#line 148
    len = (unsigned int )tmp;
#line 149
    if (len == 4294967295U) {
#line 149
      error((char *)"read error");
    }
#line 150
    total_bytes_left -= len;
#line 151
    total_bytes_read += len;
  }





#line 217
  gc = (global_context *)arg;
#line 218
  tmp = initialize_queue();
#line 218
  q = tmp;
#line 220
  while (1) {
#line 222
    pthread_mutex_lock(& gc->output_fd_lock);
#line 223
    while (1) {
#line 223
      tmp___0 = queue_empty((queue const   *)gc->output_queue);
#line 223
      if (tmp___0) {
#line 223
        if (! (gc->kill_output_io_thread != 1)) {
#line 223
          break;
        }
      } else {
#line 223
        break;
      }
#line 224
      pthread_cond_wait((pthread_cond_t * __restrict  )(& gc->more_io_output), (pthread_mutex_t * __restrict  )(& gc->output_fd_lock));
    }
#line 226
    if (gc->kill_output_io_thread == 1) {
#line 226
      tmp___1 = queue_empty((queue const   *)gc->output_queue);
#line 226
      if (tmp___1) {
#line 228
        pthread_mutex_unlock(& gc->output_fd_lock);
#line 229
        break;
      }
    }
#line 232
    while (1) {
#line 232
      tmp___3 = queue_empty((queue const   *)gc->output_queue);
#line 232
      if (tmp___3) {
#line 232
        break;
      }
#line 233
      tmp___2 = dequeue(gc->output_queue);
#line 233
      enqueue(q, tmp___2);
    }
#line 235
    pthread_mutex_unlock(& gc->output_fd_lock);
#line 237
    while (1) {
#line 237
      tmp___6 = queue_empty((queue const   *)q);
#line 237
      if (tmp___6) {
#line 237
        break;
      }
#line 239
      tmp___4 = dequeue(q);
#line 239
      data = (quick_data *)tmp___4;
#line 241
      written_bytes = 0U;
#line 242
      total_bytes = data->length;
#line 243
      remaining_bytes = total_bytes;
#line 245
      while (remaining_bytes != 0U) {
#line 247
        tmp___5 = write(gc->ofd, (void const   *)(data->buffer + written_bytes), (size_t )remaining_bytes);
#line 247
        n = (unsigned int )tmp___5;
#line 248
        if (n == 4294967295U) {
#line 248
          write_error();
        }
#line 249
        remaining_bytes -= n;
#line 249
        written_bytes += n;
      }
    }
#line 256
    if (gc->kill_output_io_thread == 1) {
#line 256
      break;
    }
  }







#line 264
  first_pass = 0;
#line 264
  quit_flag = 0;
#line 266
  i = 0;
#line 266
  while ((unsigned int )i != gc->number_of_threads) {
#line 268
    if (gc->bytes_to_read > 0ULL) {
#line 271
      tmp = grab_another_block(gc, (thread_context *)((void *)0));
#line 271
      tc = tmp;
#line 272
      thread_context_init(tc);
#line 273
      if ((unsigned long )tc == (unsigned long )((void *)0)) {
#line 273
        break;
      }
#line 275
      dispatch(gc->pool, & deflate_work, (void *)tc);
    } else {
#line 277
      break;
    }
#line 266
    i ++;
  }




#line 467
        tc->lookahead -= tc->prev_length - 1U;
#line 468
        tc->prev_length -= 2U;
#line 469
        while (1) {
#line 470
          (tc->strstart) ++;
#line 471
          tc->ins_h = ((tc->ins_h << 5) ^ (unsigned int )tc->window[(tc->strstart + 3U) - 1U]) & ((uin )(1 << 14) - 1U);
#line 471
          hash_head = (IPos )tc->head[tc->ins_h];
#line 471
          tc->prev[tc->strstart & 32767U] = (ush )hash_head;
#line 471
          tc->head[tc->ins_h] = (ush )tc->strstart;
#line 469
          (tc->prev_length) --;
#line 469
          if (! (tc->prev_length != 0U)) {
#line 469
            break;
          }
        }
#line 478




    while (1) {
#line 511
      if (tc->lookahead < 262U) {
#line 511
        if (! (! tc->eofile)) {
#line 511
          break;
        }
      } else {
#line 511
        break;
      }
#line 511
      fill_window(tc);
    }





#line 624
  tc->compr_level = pack_level;
#line 628
  j = 0U;
#line 628
  while (j < (uin )(1 << 14)) {
#line 628
    tc->head[j] = (ush )0;
#line 628
    j ++;
  }



#line 653
  tc->eofile = 0;
#line 657
  while (1) {
#line 657
    if (tc->lookahead < 262U) {
#line 657
      if (! (! tc->eofile)) {
#line 657
        break;
      }
    } else {
#line 657
      break;
    }
#line 657
    fill_window(tc);
  }
#line 659
  tc->ins_h = 0U;
#line 660
  j = 0U;
#line 660
  while (j < 2U) {
#line 660
    tc->ins_h = ((tc->ins_h << 5) ^ (unsigned int )tc->window[j]) & ((uin )(1 << 14) - 1U);
#line 660
    j ++;
  }



#line 688
    tc->match_start -= 32768U;
#line 689
    tc->strstart -= 32768U;
#line 691
    tc->block_start -= 32768L;
#line 693
    n = 0U;
#line 693
    while (n < (uin )(1 << 14)) {
#line 694
      m = (unsigned int )tc->head[n];
#line 695
      if (m >= 32768U) {
#line 695
        tmp = m - 32768U;
      } else {
#line 695
        tmp = 0U;
      }
#line 695
      tc->head[n] = (Pos )tmp;
#line 693
      n ++;
    }





#line 697
    n = 0U;
#line 697
    while (n < 32768U) {
#line 698
      m = (unsigned int )tc->prev[n];
#line 699
      if (m >= 32768U) {
#line 699
        tmp___0 = m - 32768U;
      } else {
#line 699
        tmp___0 = 0U;
      }
#line 699
      tc->prev[n] = (Pos )tmp___0;
#line 697
      n ++;
    }








#line 132
  tc->file_type = attr;
#line 133
  tc->file_method = methodp;
#line 134
  tmp = 0U;
#line 134
  tc->input_len = tmp;
#line 134
  tc->compressed_len = tmp;
#line 139
  length = 0;
#line 140
  code = 0;
#line 140
  while (code < 28) {
#line 141
    tc->base_length[code] = length;
#line 142
    n = 0;
#line 142
    while (n < 1 << extra_lbits[code]) {
#line 143
      tmp___0 = length;
#line 143
      length ++;
#line 143
      tc->length_code[tmp___0] = (uch )code;
#line 142
      n ++;
    }
#line 140
    code ++;
  }










#line 152
  tc->length_code[length - 1] = (uch )code;
#line 154
  dist = 0;
#line 155
  code = 0;
#line 155
  while (code < 16) {
#line 156
    tc->base_dist[code] = dist;
#line 157
    n = 0;
#line 157
    while (n < 1 << extra_dbits[code]) {
#line 158
      tmp___1 = dist;
#line 158
      dist ++;
#line 158
      tc->dist_code[tmp___1] = (uch )code;
#line 157
      n ++;
    }
#line 155
    code ++;
  }











#line 163
  dist >>= 7;
#line 164
  while (code < 30) {
#line 165
    tc->base_dist[code] = dist << 7;
#line 166
    n = 0;
#line 166
    while (n < 1 << (extra_dbits[code] - 7)) {
#line 167
      tmp___2 = dist;
#line 167
      dist ++;
#line 167
      tc->dist_code[256 + tmp___2] = (uch )code;
#line 166
      n ++;
    }
#line 164
    code ++;
  }











#line 174
  bits = 0;
#line 174
  while (bits <= 15) {
#line 174
    tc->bl_count[bits] = (ush )0;
#line 174
    bits ++;
  }
#line 175
  n = 0;
#line 176
  while (n <= 143) {
#line 176
    tmp___3 = n;
#line 176
    n ++;
#line 176
    tc->static_ltree[tmp___3].dl.len = (ush )8;
#line 176
    tc->bl_count[8] = (ush )((int )tc->bl_count[8] + 1);
  }
#line 177
  while (n <= 255) {
#line 177
    tmp___4 = n;
#line 177
    n ++;
#line 177
    tc->static_ltree[tmp___4].dl.len = (ush )9;
#line 177
    tc->bl_count[9] = (ush )((int )tc->bl_count[9] + 1);
  }
#line 178
  while (n <= 279) {
#line 178
    tmp___5 = n;
#line 178
    n ++;
#line 178
    tc->static_ltree[tmp___5].dl.len = (ush )7;
#line 178
    tc->bl_count[7] = (ush )((int )tc->bl_count[7] + 1);
  }
#line 179
  while (n <= 287) {
#line 179
    tmp___6 = n;
#line 179
    n ++;
#line 179
    tc->static_ltree[tmp___6].dl.len = (ush )8;
#line 179
    tc->bl_count[8] = (ush )((int )tc->bl_count[8] + 1);
  }
#line 185
  gen_codes(tc->static_ltree, 287, tc);
#line 188
  n = 0;
#line 188
  while (n < 30) {
#line 189
    tc->static_dtree[n].dl.len = (ush )5;
#line 190
    tmp___7 = bi_reverse((unsigned int )n, 5);
#line 190
    tc->static_dtree[n].fc.code = (ush )tmp___7;
#line 188
    n ++;
  }









#line 203
  n = 0;
#line 203
  while (n < 286) {
#line 203
    tc->dyn_ltree[n].fc.freq = (ush )0;
#line 203
    n ++;
  }
#line 205
  n = 0;
#line 205
  while (n < 30) {
#line 205
    tc->dyn_dtree[n].fc.freq = (ush )0;
#line 205
    n ++;
  }
#line 207
  n = 0;
#line 207
  while (n < 19) {
#line 207
    tc->bl_tree[n].fc.freq = (ush )0;
#line 207
    n ++;
  }













#line 219
  v = tc->heap[k];
#line 220
  j = k << 1;
#line 221
  while (j <= tc->heap_len) {
#line 223
    if (j < tc->heap_len) {
#line 223
      if ((int )(tree + tc->heap[j + 1])->fc.freq < (int )(tree + tc->heap[j])->fc.freq) {
#line 223
        j ++;
      } else
#line 223
      if ((int )(tree + tc->heap[j + 1])->fc.freq == (int )(tree + tc->heap[j])->fc.freq) {
#line 223
        if ((int )tc->depth[tc->heap[j + 1]] <= (int )tc->depth[tc->heap[j]]) {
#line 223
          j ++;
        }
      }
    }
#line 226
    if ((int )(tree + v)->fc.freq < (int )(tree + tc->heap[j])->fc.freq) {
#line 226
      break;
    } else
#line 226
    if ((int )(tree + v)->fc.freq == (int )(tree + tc->heap[j])->fc.freq) {
#line 226
      if ((int )tc->depth[v] <= (int )tc->depth[tc->heap[j]]) {
#line 226
        break;
      }
    }
#line 229
    tc->heap[k] = tc->heap[j];
#line 229
    k = j;
#line 232
    j <<= 1;
  }








#line 257
  (tree + tc->heap[tc->heap_max])->dl.len = (ush )0;
#line 259
  h = tc->heap_max + 1;
#line 259
  while (h < 573) {
#line 260
    n = tc->heap[h];
#line 261
    bits = (int )(tree + (tree + n)->dl.dad)->dl.len + 1;
#line 262
    if (bits > max_length) {
#line 262
      bits = max_length;
#line 262
      overflow ++;
    }
#line 263
    (tree + n)->dl.len = (ush )bits;
#line 266
    if (n > max_code) {
#line 266
      goto __Cont;
    }
#line 268
    tc->bl_count[bits] = (ush )((int )tc->bl_count[bits] + 1);
#line 269
    xbits = 0;
#line 270
    if (n >= base) {
#line 270
      xbits = *(extra + (n - base));
    }
#line 271
    f = (tree + n)->fc.freq;
#line 272
    tc->opt_len += (ulg )f * (ulg )(bits + xbits);
#line 273
    if (stree) {
#line 273
      tc->static_len += (ulg )f * (ulg )((int )(stree + n)->dl.len + xbits);
    }
    __Cont: /* CIL Label */ 
#line 259
    h ++;
  }









#line 281
  while (1) {
#line 282
    bits = max_length - 1;
#line 283
    while ((int )tc->bl_count[bits] == 0) {
#line 283
      bits --;
    }
#line 284
    tc->bl_count[bits] = (ush )((int )tc->bl_count[bits] - 1);
#line 285
    tc->bl_count[bits + 1] = (ush )((int )tc->bl_count[bits + 1] + 2);
#line 286
    tc->bl_count[max_length] = (ush )((int )tc->bl_count[max_length] - 1);
#line 290
    overflow -= 2;
#line 281
    if (! (overflow > 0)) {
#line 281
      break;
    }
  }









#line 298
  bits = max_length;
#line 298
  while (bits != 0) {
#line 299
    n = (int )tc->bl_count[bits];
#line 300
    while (n != 0) {
#line 301
      h --;
#line 301
      m = tc->heap[h];
#line 303
      if (m > max_code) {
#line 303
        continue;
      }
#line 304
      if ((unsigned int )(tree + m)->dl.len != (unsigned int )bits) {
#line 306
        tc->opt_len += (ulg )(((long )bits - (long )(tree + m)->dl.len) * (long )(tree + m)->fc.freq);
#line 307
        (tree + m)->dl.len = (ush )bits;
      }
#line 309
      n --;
    }
#line 298
    bits --;
  }



#line 334
  n = 0;
#line 334
  while (n <= max_code) {
#line 335
    len = (int )(tree + n)->dl.len;
#line 336
    if (len == 0) {
#line 336
      goto __Cont;
    }
#line 338
    tmp = next_code[len];
#line 338
    next_code[len] = (ush )((int )next_code[len] + 1);
#line 338
    tmp___0 = bi_reverse((unsigned int )tmp, len);
#line 338
    (tree + n)->fc.code = (ush )tmp___0;
    __Cont: /* CIL Label */ 
#line 334
    n ++;
  }
















#line 347
  tree = desc->dyn_tree;
#line 348
  stree = desc->static_tree;
#line 349
  elems = desc->elems;
#line 351
  max_code = -1;
#line 352
  node = elems;
#line 358
  tc->heap_len = 0;
#line 358
  tc->heap_max = 573;
#line 360
  n = 0;
#line 360
  while (n < elems) {
#line 361
    if ((int )(tree + n)->fc.freq != 0) {
#line 362
      (tc->heap_len) ++;
#line 362
      max_code = n;
#line 362
      tc->heap[tc->heap_len] = max_code;
#line 363
      tc->depth[n] = (uch )0;
    } else {
#line 365
      (tree + n)->dl.len = (ush )0;
    }
#line 360
    n ++;
  }
#line 374
  while (tc->heap_len < 2) {
#line 375
    (tc->heap_len) ++;
#line 375
    if (max_code < 2) {
#line 375
      max_code ++;
#line 375
      tmp = max_code;
    } else {
#line 375
      tmp = 0;
    }
#line 375
    tc->heap[tc->heap_len] = tmp;
#line 375
    new = tmp;
#line 377
    (tree + new)->fc.freq = (ush )1;
#line 378
    tc->depth[new] = (uch )0;
#line 379
    (tc->opt_len) --;
#line 379
    if (stree) {
#line 379
      tc->static_len -= (ulg )(stree + new)->dl.len;
    }
  }





















#line 520
  max_blindex = 18;
#line 520
  while (max_blindex >= 3) {
#line 521
    if ((int )tc->bl_tree[bl_order[max_blindex]].dl.len != 0) {
#line 521
      break;
    }
#line 520
    max_blindex --;
  }






#line 686
      dcode = 0;
#line 686
      while (dcode < 30) {
#line 687
        out_length += (ulg )((long )tc->dyn_dtree[dcode].fc.freq * (5L + (long )extra_dbits[dcode]));
#line 686
        dcode ++;
      }



#line 71
  res = 0U;
#line 72
  while (1) {
#line 73
    res |= code & 1U;
#line 74
    code >>= 1;
#line 74
    res <<= 1;
#line 72
    len --;
#line 72
    if (! (len > 0)) {
#line 72
      break;
    }
  }




#line 97
  tc->bits_sent += (unsigned long )len << 3;
#line 98
  while (1) {
#line 98
    tmp___9 = len;
#line 98
    len --;
#line 98
    if (! tmp___9) {
#line 98
      break;
    }
#line 98
    tmp___7 = tc->outcnt;
#line 98
    (tc->outcnt) ++;
#line 98
    tmp___8 = buf;
#line 98
    buf ++;
#line 98
    tc->outbuf[tmp___7] = (uch )*tmp___8;
#line 98
    if (tc->outcnt == 16384U) {
#line 98
      flush_outbuf(tc);
    }
  }



    c = crc;
#line 73
    if (n) {
#line 73
      while (1) {
#line 73
        tmp = s;
#line 73
        s ++;
#line 73
        c = crc_32_tab[((int )c ^ (int )*tmp) & 255] ^ (c >> 8);
#line 73
        n --;
#line 73
        if (! n) {
#line 73
          break;
        }
      }
    }




#line 91
  tc->insize = 0U;
#line 92
  while (1) {
#line 94
    if (tc->full_input_buffer_remaining_bytes > 32768U - tc->insize) {
#line 94
      len = 32768U - tc->insize;
    } else {
#line 95
      len = tc->full_input_buffer_remaining_bytes;
    }
#line 97
    memcpy((void * __restrict  )((char *)(tc->inbuf) + tc->insize), (void const   * __restrict  )(tc->full_input_buffer + tc->full_input_buffer_bytes_read),
           (size_t )len);
#line 98
    tc->full_input_buffer_bytes_read += len;
#line 99
    tc->full_input_buffer_remaining_bytes -= len;
#line 101
    if (len == 0U) {
#line 101
      break;
    }
#line 102
    tc->insize += len;
#line 92
    if (! (tc->insize < 32768U)) {
#line 92
      break;
    }
  }




#line 129
  t = s;
#line 129
  while (*t) {
#line 129
    if (sizeof(*t) > 1UL) {
#line 129
      __res = tolower((int )*t);
    } else {
#line 129
      tmp___0 = __ctype_tolower_loc();
#line 129
      __res = (int )*(*tmp___0 + (int )*t);
    }
#line 129
    *t = (char )__res;
#line 129
    t ++;
  }


#line 171
  cur = list_to_insert_into->head;
#line 172
  prev = (sorted_linked_list_node *)((void *)0);
#line 173
  while ((unsigned long )cur != (unsigned long )((void *)0)) {
#line 175
    if (index___0 < cur->index) {
#line 177
      new_node->next = cur;
#line 178
      if ((unsigned long )prev != (unsigned long )((void *)0)) {
#line 178
        prev->next = new_node;
      } else {
#line 179
        list_to_insert_into->head = new_node;
      }
#line 180
      return;
    }
#line 182
    prev = cur;
#line 182
    cur = cur->next;
  }






#line 191
  cur = list->head;
#line 192
  prev = (sorted_linked_list_node *)((void *)0);
#line 192
  data = (void *)0;
#line 193
  while ((unsigned long )cur != (unsigned long )((void *)0)) {
#line 195
    if (cur->index == index___0) {
#line 197
      (list->length) --;
#line 198
      data = cur->data;
#line 200
      if ((unsigned long )prev == (unsigned long )((void *)0)) {
#line 200
        list->head = cur->next;
      } else {
#line 201
        prev->next = cur->next;
      }
#line 202
      free((void *)cur);
#line 202
      return (data);
    }
#line 204
    prev = cur;
#line 205
    cur = cur->next;
  }





#line 273
  c = (spec_thread *)arg;
#line 274
  while (1) {
#line 276
    pthread_mutex_lock(& c->thread_lock);
#line 277
    while (1) {
#line 277
      if (c->shutdown == 0) {
#line 277
        if (! (c->busy == 0)) {
#line 277
          break;
        }
      } else {
#line 277
        break;
      }
#line 278
      pthread_cond_wait((pthread_cond_t * __restrict  )(& c->thread_cond), (pthread_mutex_t * __restrict  )(& c->thread_lock));
    }
#line 280
    if (c->shutdown) {
#line 281
      pthread_mutex_unlock(& c->thread_lock);
#line 281
      pthread_exit((void *)0);
    }
#line 283
    job = (work_t *)c->work;
#line 284
    (*(job->routine))(job->arg);
#line 284
    c->busy = 0;
#line 286
    pthread_mutex_unlock(& c->thread_lock);
#line 288
    pthread_mutex_lock(& (c->pool)->completed_threads_lock);
#line 289
  }





