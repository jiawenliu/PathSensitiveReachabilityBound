#line 36
  part = thread->partition;
#line 37
  ystart = part->ystart;
#line 38
  ystop = part->ystop;
#line 40
  clock_gettime(0, & stime___0);
#line 41
  y = ystart;
#line 41
  while (y < ystop) {
#line 42
    x = 0;
#line 42
    while (x < (int )xsize) {
#line 43
      tmp = pix(src, (int const   )x, (int const   )y, xsize);
#line 43
      r = (double )(*(w + 0) * (double const   )tmp->r);
#line 44
      tmp___0 = pix(src, (int const   )x, (int const   )y, xsize);
#line 44
      g = (double )(*(w + 0) * (double const   )tmp___0->g);
#line 45
      tmp___1 = pix(src, (int const   )x, (int const   )y, xsize);
#line 45
      b = (double )(*(w + 0) * (double const   )tmp___1->b);
#line 46
      n = (double )*(w + 0);
#line 47
      wi = 1;
#line 47
      while (wi <= (int )radius) {
#line 48
        wc = (double )*(w + wi);
#line 49
        x2 = x - wi;
#line 50
        if (x2 >= 0) {
#line 51
          tmp___2 = pix(src, (int const   )x2, (int const   )y, xsize);
#line 51
          r += wc * (double )tmp___2->r;
#line 52
          tmp___3 = pix(src, (int const   )x2, (int const   )y, xsize);
#line 52
          g += wc * (double )tmp___3->g;
#line 53
          tmp___4 = pix(src, (int const   )x2, (int const   )y, xsize);
#line 53
          b += wc * (double )tmp___4->b;
#line 54
          n += wc;
        }
#line 56
        x2 = x + wi;
#line 57
        if (x2 < (int )xsize) {
#line 58
          tmp___5 = pix(src, (int const   )x2, (int const   )y, xsize);
#line 58
          r += wc * (double )tmp___5->r;
#line 59
          tmp___6 = pix(src, (int const   )x2, (int const   )y, xsize);
#line 59
          g += wc * (double )tmp___6->g;
#line 60
          tmp___7 = pix(src, (int const   )x2, (int const   )y, xsize);
#line 60
          b += wc * (double )tmp___7->b;
#line 61
          n += wc;
        }
#line 47
        wi ++;
      }
#line 64
      tmp___8 = pix_trans(dst, (int const   )x, (int const   )y, ysize);
#line 64
      tmp___8->r = (unsigned char )(r / n);
#line 65
      tmp___9 = pix_trans(dst, (int const   )x, (int const   )y, ysize);
#line 65
      tmp___9->g = (unsigned char )(g / n);
#line 66
      tmp___10 = pix_trans(dst, (int const   )x, (int const   )y, ysize);
#line 66
      tmp___10->b = (unsigned char )(b / n);
#line 42
      x ++;
    }
#line 41
    y ++;
  }



#line 72
  y = 0;
#line 72
  while (y < (int )xsize) {
#line 73
    x = ystart;
#line 73
    while (x < ystop) {
#line 74
      tmp___11 = pix(dst, (int const   )x, (int const   )y, ysize);
#line 74
      r = (double )(*(w + 0) * (double const   )tmp___11->r);
#line 75
      tmp___12 = pix(dst, (int const   )x, (int const   )y, ysize);
#line 75
      g = (double )(*(w + 0) * (double const   )tmp___12->g);
#line 76
      tmp___13 = pix(dst, (int const   )x, (int const   )y, ysize);
#line 76
      b = (double )(*(w + 0) * (double const   )tmp___13->b);
#line 77
      n = (double )*(w + 0);
#line 78
      wi = 1;
#line 78
      while (wi <= (int )radius) {
#line 79
        wc = (double )*(w + wi);
#line 80
        x2 = x - wi;
#line 81
        if (x2 >= 0) {
#line 82
          tmp___14 = pix(dst, (int const   )x2, (int const   )y, ysize);
#line 82
          r += wc * (double )tmp___14->r;
#line 83
          tmp___15 = pix(dst, (int const   )x2, (int const   )y, ysize);
#line 83
          g += wc * (double )tmp___15->g;
#line 84
          tmp___16 = pix(dst, (int const   )x2, (int const   )y, ysize);
#line 84
          b += wc * (double )tmp___16->b;
#line 85
          n += wc;
        }
#line 87
        x2 = x + wi;
#line 88
        if (x2 < (int )ysize) {
#line 89
          tmp___17 = pix(dst, (int const   )x2, (int const   )y, ysize);
#line 89
          r += wc * (double )tmp___17->r;
#line 90
          tmp___18 = pix(dst, (int const   )x2, (int const   )y, ysize);
#line 90
          g += wc * (double )tmp___18->g;
#line 91
          tmp___19 = pix(dst, (int const   )x2, (int const   )y, ysize);
#line 91
          b += wc * (double )tmp___19->b;
#line 92
          n += wc;
        }
#line 78
        wi ++;
      }
#line 95
      tmp___20 = pix_trans(src, (int const   )x, (int const   )y, xsize);
#line 95
      tmp___20->r = (unsigned char )(r / n);
#line 96
      tmp___21 = pix_trans(src, (int const   )x, (int const   )y, xsize);
#line 96
      tmp___21->g = (unsigned char )(g / n);
#line 97
      tmp___22 = pix_trans(src, (int const   )x, (int const   )y, xsize);
#line 97
      tmp___22->b = (unsigned char )(b / n);
#line 73
      x ++;
    }
#line 72
    y ++;
  }



#line 82
  i = 0;
#line 82
  while (i < thread_count) {
#line 83
    (blurdata + i)->xsize = xsize;
#line 84
    (blurdata + i)->ysize = ysize;
#line 85
    (blurdata + i)->src = src;
#line 86
    (blurdata + i)->dst = dst;
#line 87
    (blurdata + i)->radius = radius;
#line 88
    (blurdata + i)->w = w;
#line 89
    (blurdata + i)->imageThreads = imageThreads;
#line 90
    (blurdata + i)->rank = i;
#line 82
    i ++;
  }



  i = 0;
#line 95
  while (i < thread_count) {
#line 97
    (imageThreads + i)->argument = (void *)(blurdata + i);
#line 98
    (imageThreads + i)->thread = createThread((void *)(& blurfilterwrapper), (imageThreads + i)->argument);
#line 95
    i ++;
  }



#line 22
  i = 0;
#line 22
  while (i < n + 1) {
#line 23
    x = ((double )i * 1.33) / (double )n;
#line 24
    *(weights_out + i) = exp((- x * x) * 3.14159);
#line 22
    i ++;
  }


#line 18
  i = 0;
#line 18
  while (i < count) {
#line 19
    tmp = malloc(sizeof(imagepart ));
#line 19
    (threadData + i)->partition = (imagepart *)tmp;
#line 18
    i ++;
  }
#line 22
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Setting initial height\n");
#line 24
  i = 0;
#line 24
  while (i < count) {
#line 25
    ((threadData + i)->partition)->width = (int )xsize;
#line 26
    ((threadData + i)->partition)->height = partHeight;
#line 24
    i ++;
  }
#line 29
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Setting corrected height\n");
#line 30
  i = 0;
#line 30
  while (i < partHeightLeft) {
#line 31
    (((threadData + i)->partition)->height) ++;
#line 30
    i ++;
  }
#line 34
  fprintf((FILE * __restrict  )stderr, (char const   * __restrict  )"Setting pixel count & bytes\n");
#line 35
  i = 0;
#line 35
  while (i < count) {
#line 37
    ((threadData + i)->partition)->pixelCount = ((threadData + i)->partition)->width * ((threadData + i)->partition)->height;
#line 39
    ((threadData + i)->partition)->bytes = (int )((unsigned long )((threadData + i)->partition)->pixelCount * sizeof(pixel ));
#line 35
    i ++;
  }

#line 49
  i = 1;
#line 49
  while (i < count) {
#line 51
    ((threadData + i)->partition)->ystart = ((threadData + (i - 1))->partition)->ystop;
#line 52
    ((threadData + i)->partition)->ystop = ((threadData + i)->partition)->ystart + ((threadData + i)->partition)->height;
#line 54
    ((threadData + i)->partition)->sourcePixels = ((threadData + (i - 1))->partition)->sourcePixels + ((threadData + (i - 1))->partition)->bytes;
#line 55
    ((threadData + i)->partition)->destinationPixels = ((threadData + (i - 1))->partition)->destinationPixels + ((threadData + (i - 1))->partition)->bytes;
#line 49
    i ++;
  }




#line 22
  i = 0;
#line 22
  while (i < count) {
#line 23
    (threads + i)->rank = i;
#line 24
    (threads + i)->thread_count = count;
#line 22
    i ++;
  }


#line 18
  if ((int )ch == 35) {
#line 18
    while (1) {
#line 19
      tmp___0 = _IO_getc(file);
#line 19
      ch = (char )tmp___0;
#line 20
      if ((int )ch == -1) {
#line 21
        ppm_error((char *)"read error");
      }
#line 18
      if (! ((int )ch != 10)) {
#line 18
        break;
      }
    }
  }



#line 47
  while (1) {
#line 48
    ch = ppm_readchar(file);
#line 47
    if (! ((int )ch == 32)) {
#line 47
      if (! ((int )ch == 9)) {
#line 47
        if (! ((int )ch == 10)) {
#line 47
          break;
        }
      }
    }
  }
#line 51
  if ((int )ch < 48) {
#line 52
    ppm_error((char *)"error in readint");
  } else
#line 51
  if ((int )ch > 57) {
#line 52
    ppm_error((char *)"error in readint");
  }
#line 53
  i = 0;
#line 54
  while (1) {
#line 55
    i = i * 10 + ((int )ch - 48);
#line 56
    ch = ppm_readchar(file);
#line 54
    if ((int )ch >= 48) {
#line 54
      if (! ((int )ch <= 57)) {
#line 54
        break;
      }
    } else {
#line 54
      break;
    }
  }




#line 14
  tmp = 3U;
#line 14
  while (! (tmp >= 40U)) {
#line 14
    ctype[tmp] = (char)0;
#line 14
    tmp ++;
  }


#line 39
  while (1) {
#line 39
    tmp___1 = fgets((char * __restrict  )(line), 80, (FILE * __restrict  )fp);
#line 39
    if (tmp___1) {
#line 39
      if (! ((int )line[0] == 35)) {
#line 39
        break;
      }
    } else {
#line 39
      break;
    }
  }


#line 35
  i = start;
#line 35
  sum = 0U;
#line 35
  while (i < stop) {
#line 36
    sum += ((unsigned int )(src + i)->r + (unsigned int )(src + i)->g) + (unsigned int )(src + i)->b;
#line 35
    i ++;
  }

#line 47
  sum = *thresholdsum / numptot;
#line 50
  i = start;
#line 50
  while (i < stop) {
#line 51
    psum = ((unsigned int )(src + i)->r + (unsigned int )(src + i)->g) + (unsigned int )(src + i)->b;
#line 52
    if (sum > psum) {
#line 53
      tmp___0 = (unsigned char)0;
#line 53
      (src + i)->b = tmp___0;
#line 53
      tmp = tmp___0;
#line 53
      (src + i)->g = tmp;
#line 53
      (src + i)->r = tmp;
    } else {
#line 56
      tmp___2 = (unsigned char)255;
#line 56
      (src + i)->b = tmp___2;
#line 56
      tmp___1 = tmp___2;
#line 56
      (src + i)->g = tmp___1;
#line 56
      (src + i)->r = tmp___1;
    }
#line 50
    i ++;
  }

#line 62
  i = 0;
#line 62
  while (i < thread_count) {
#line 63
    (thresdata + i)->xsize = xsize;
#line 64
    (thresdata + i)->ysize = ysize;
#line 65
    (thresdata + i)->src = src;
#line 66
    (thresdata + i)->dst = dst;
#line 67
    (thresdata + i)->thresholdsum = & thresholdsum;
#line 68
    (thresdata + i)->imageThreads = imageThreads;
#line 69
    (thresdata + i)->rank = i;
#line 70
    (thresdata + i)->thresholdsum_mutex = & thresholdsum_mutex;
#line 62
    i ++;
  }


#line 76
  i = 0;
#line 76
  while (i < thread_count) {
#line 78
    (imageThreads + i)->argument = (void *)(thresdata + i);
#line 79
    (imageThreads + i)->thread = createThread((void *)(& thresfilterwrapper), (imageThreads + i)->argument);
#line 76
    i ++;
  }
