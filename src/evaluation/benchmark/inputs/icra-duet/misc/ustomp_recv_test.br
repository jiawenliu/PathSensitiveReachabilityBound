#line 973
  while (1) {
#line 973
    if ((int const   )*(__s + __result) != 0) {
#line 973
      if (! ((int const   )*(__s + __result) != (int const   )__reject)) {
#line 973
        break;
      }
    } else {
#line 973
      break;
    }
#line 974
    __result ++;
  }


#line 983
  __result = (size_t )0;
#line 984
  while (1) {
#line 984
    if ((int const   )*(__s + __result) != 0) {
#line 984
      if ((int const   )*(__s + __result) != (int const   )__reject1) {
#line 984
        if (! ((int const   )*(__s + __result) != (int const   )__reject2)) {
#line 984
          break;
        }
      } else {
#line 984
        break;
      }
    } else {
#line 984
      break;
    }
#line 986
    __result ++;
  }


#line 996
  __result = (size_t )0;
#line 997
  while (1) {
#line 997
    if ((int const   )*(__s + __result) != 0) {
#line 997
      if ((int const   )*(__s + __result) != (int const   )__reject1) {
#line 997
        if ((int const   )*(__s + __result) != (int const   )__reject2) {
#line 997
          if (! ((int const   )*(__s + __result) != (int const   )__reject3)) {
#line 997
            break;
          }
        } else {
#line 997
          break;
        }
      } else {
#line 997
        break;
      }
    } else {
#line 997
      break;
    }
#line 999
    __result ++;
  }


#line 1048
  __result = (size_t )0;
#line 1050
  while ((int const   )*(__s + __result) == (int const   )__accept) {
#line 1051
    __result ++;
  }


#line 1060
  __result = (size_t )0;
#line 1062
  while (1) {
#line 1062
    if (! ((int const   )*(__s + __result) == (int const   )__accept1)) {
#line 1062
      if (! ((int const   )*(__s + __result) == (int const   )__accept2)) {
#line 1062
        break;
      }
    }
#line 1063
    __result ++;
  }


#line 1072
  __result = (size_t )0;
#line 1074
  while (1) {
#line 1074
    if (! ((int const   )*(__s + __result) == (int const   )__accept1)) {
#line 1074
      if (! ((int const   )*(__s + __result) == (int const   )__accept2)) {
#line 1074
        if (! ((int const   )*(__s + __result) == (int const   )__accept3)) {
#line 1074
          break;
        }
      }
    }
#line 1076
    __result ++;
  }

#line 1126
  while (1) {
#line 1126
    if ((int const   )*__s != 0) {
#line 1126
      if ((int const   )*__s != (int const   )__accept1) {
#line 1126
        if (! ((int const   )*__s != (int const   )__accept2)) {
#line 1126
          break;
        }
      } else {
#line 1126
        break;
      }
    } else {
#line 1126
      break;
    }
#line 1127
    __s ++;
  }



#line 1137
  while (1) {
#line 1137
    if ((int const   )*__s != 0) {
#line 1137
      if ((int const   )*__s != (int const   )__accept1) {
#line 1137
        if ((int const   )*__s != (int const   )__accept2) {
#line 1137
          if (! ((int const   )*__s != (int const   )__accept3)) {
#line 1137
            break;
          }
        } else {
#line 1137
          break;
        }
      } else {
#line 1137
        break;
      }
    } else {
#line 1137
      break;
    }
#line 1139
    __s ++;
  }


#line 1177
  while ((int )*__s == (int )__sep) {
#line 1178
    __s ++;
  }


#line 1182
    tmp___0 = __s;
#line 1182
    __s ++;
#line 1182
    __result = tmp___0;
#line 1183
    while ((int )*__s != 0) {
#line 1184
      tmp___1 = __s;
#line 1184
      __s ++;
#line 1184
      if ((int )*tmp___1 == (int )__sep) {
#line 1186
        *(__s + -1) = (char )'\000';
#line 1187
        break;
      }
    }


#line 1237
    __cp = __retval;
#line 1238
    while (1) {
#line 1240
      if ((int )*__cp == 0) {
#line 1242
        __cp = (char *)((void *)0);
#line 1243
        break;
      }
#line 1245
      if ((int )*__cp == (int )__reject1) {
#line 1247
        tmp___0 = __cp;
#line 1247
        __cp ++;
#line 1247
        *tmp___0 = (char )'\000';
#line 1248
        break;
      } else
#line 1245
      if ((int )*__cp == (int )__reject2) {
#line 1247
        tmp___0 = __cp;
#line 1247
        __cp ++;
#line 1247
        *tmp___0 = (char )'\000';
#line 1248
        break;
      }
#line 1250
      __cp ++;
    }


#line 1265
    __cp = __retval;
#line 1266
    while (1) {
#line 1268
      if ((int )*__cp == 0) {
#line 1270
        __cp = (char *)((void *)0);
#line 1271
        break;
      }
#line 1273
      if ((int )*__cp == (int )__reject1) {
#line 1275
        tmp___0 = __cp;
#line 1275
        __cp ++;
#line 1275
        *tmp___0 = (char )'\000';
#line 1276
        break;
      } else
#line 1273
      if ((int )*__cp == (int )__reject2) {
#line 1275
        tmp___0 = __cp;
#line 1275
        __cp ++;
#line 1275
        *tmp___0 = (char )'\000';
#line 1276
        break;
      } else
#line 1273
      if ((int )*__cp == (int )__reject3) {
#line 1275
        tmp___0 = __cp;
#line 1275
        __cp ++;
#line 1275
        *tmp___0 = (char )'\000';
#line 1276
        break;
      }
#line 1278
      __cp ++;
    }
#line 99
  ustomp_connect(conn);
#line 100
  while (tries < 10) {
#line 101
    state = ustomp_get_state(conn);
#line 102
    if (state != 128) {
#line 103
      tmp___0 = ustomp_state_desc(state);
#line 103
      printf((char const   * __restrict  )"test does stuff! woohoo! (state = %s)\n",
             tmp___0);
#line 104
      sleep(1U);
    } else {
#line 106
      printf((char const   * __restrict  )"okay, we\'re set!\n");
#line 109
      puts(topic);
#line 111
      headers = treeCreate();
#line 112
      treeDictInsertString(headers, "destination", topic);
#line 113
      ustomp_set_topic(conn, topic);
#line 114
      ustomp_subscribe(conn, topic);
#line 115
      return (0);
    }
#line 100
    tries ++;
  }


#line 246
  *t_readerPos = (*t_readerPos + 1U) % buf->size;
#line 247
  pthread_mutex_lock(& buf->buf_mutex);
#line 248
  while (1) {
#line 248
    if (*t_readerPos == buf->writer) {
#line 248
      if (! (! g_stopthread)) {
#line 248
        break;
      }
    } else {
#line 248
      break;
    }
#line 249
    pthread_cond_wait((pthread_cond_t * __restrict  )(& buf->buf_con), (pthread_mutex_t * __restrict  )(& buf->buf_mutex));
#line 250
    *t_writerPos = buf->writer;
  }


#line 268
  pthread_mutex_lock(& buf->buf_mutex);
#line 269
  while (1) {
#line 269
    if ((unsigned long )*p == (unsigned long )(buf->buffer + buf->writer)) {
#line 269
      if (! (! g_stopthread)) {
#line 269
        break;
      }
    } else {
#line 269
      break;
    }
#line 270
    pthread_cond_wait((pthread_cond_t * __restrict  )(& buf->buf_con), (pthread_mutex_t * __restrict  )(& buf->buf_mutex));
#line 271
    *t_writerPos = buf->writer;
  }


#line 320
  flags = 0;
#line 328
  while (1) {
#line 328
    __asm__  volatile   ("cld; rep; "
                         "stosq": "=c" (__d0), "=D" (__d1): "a" (0), "0" (sizeof(fd_set ) / sizeof(__fd_mask )),
                         "1" (& fds.__fds_bits[0]): "memory");
#line 328
    break;
  }


#line 356
  writer = buffer->writer;
#line 357
  reader = buffer->reader;
#line 358
  pthread_mutex_unlock(& buffer->buf_mutex);
#line 360
  while (1) {
#line 360
    tmp___5 = bufferUsage(writer, reader, buffer->size);
#line 360
    if (! (tmp___5 < 90)) {
#line 360
      break;
    }
#line 361
    if (writer < reader) {
#line 361
      maxlen = (int )((reader - writer) - 1U);
    } else {
#line 361
      maxlen = (int )(buffer->size - writer);
    }
#line 362
    if (maxlen == 0) {
#line 364
      return (-3);
    }
#line 367
    tmp___3 = recv(sockfd, (void *)(buffer->buffer + writer), (size_t )maxlen, flags);
#line 367
    result = (int )tmp___3;
#line 368
    if (result > 0) {
#line 369
      flags = 64;
#line 370
      writer = (writer + (uint32 )result) % buffer->size;
#line 371
      *(buffer->buffer + writer) = (char )'\000';
#line 372
      pthread_mutex_lock(& buffer->buf_mutex);
#line 373
      buffer->writer = writer;
#line 375
      reader = buffer->reader;
#line 376
      pthread_cond_signal(& buffer->buf_con);
#line 377
      pthread_mutex_unlock(& buffer->buf_mutex);
    } else
#line 378
    if (result == -1) {
#line 378
      tmp___4 = __errno_location();
#line 378
      if (*tmp___4 == 11) {
#line 381
        return (-2);
      } else {
#line 378
        goto _L;
      }
    } else
    _L: /* CIL Label */ 
#line 382
    if (result == 0) {
#line 384
      return (0);
    } else {
#line 387
      return (-1);
    }
  }

#line 414
  *headerEnd = (char )'\000';
#line 415
  while (1) {
#line 415
    if ((int )*readH_key != 10) {
#line 415
      if (! ((int )*readH_key != 0)) {
#line 415
        break;
      }
    } else {
#line 415
      break;
    }
#line 416
    if ((int )*readH_key == 58) {
#line 417
      *readH_key = (char )'\000';
#line 418
      end_of_key = readH_key;
#line 419
      incBufferPointer(& readH_key, & writer, buffer);
#line 420
      readH_value = readH_key;
#line 420
      while (1) {
#line 421
        if ((int )*readH_value == 0) {
#line 422
          if ((unsigned long )start < (unsigned long )headerEnd) {
#line 422
            if ((unsigned long )readH_key < (unsigned long )headerEnd) {
#line 423
              treeDictInsertString(headers, (char const   *)start, (char const   *)readH_key);
            } else {
#line 422
              goto _L;
            }
          } else {
            _L: /* CIL Label */ 
#line 426
            key_length = (uint32 )(((readH_key - start) + (long )buffer->size) % (long )buffer->size + 1L);
#line 427
            value_length = (uint32 )(((headerEnd - readH_key) + (long )buffer->size) % (long )buffer->size + 1L);
#line 428
            tmp___0 = malloc((size_t )(key_length + 1U));
#line 428
            key = (char *)tmp___0;
#line 429
            tmp___1 = malloc((size_t )(value_length + 1U));
#line 429
            value = (char *)tmp___1;
#line 430
            copyFromBuffer(key, start, key_length, buffer);
#line 431
            copyFromBuffer(value, readH_key, value_length, buffer);
#line 432
            treeDictInsertString(headers, (char const   *)key, (char const   *)value);
#line 433
            free((void *)key);
#line 434
            free((void *)value);
          }
#line 440
          *end_of_key = (char )':';
#line 441
          *headerEnd = (char )'\n';
#line 442
          return (1);
        }
#line 420
        incBufferPointer(& readH_value, & writer, buffer);
      }
    }
#line 415
    incBufferPointer(& readH_key, & writer, buffer);
  }


#line 467
    writerPos = buffer->writer;
#line 468
    readerPos = buffer->reader;
#line 469
    while (1) {
#line 469
      if (writerPos == readerPos) {
#line 469
        if (! (! g_stopthread)) {
#line 469
          break;
        }
      } else {
#line 469
        break;
      }
#line 471
      pthread_cond_wait((pthread_cond_t * __restrict  )(& buffer->buf_con), (pthread_mutex_t * __restrict  )(& buffer->buf_mutex));
#line 472
      writerPos = buffer->writer;
    }


#line 476
    p = buffer->buffer + readerPos;
#line 476
    start = p;
#line 484
    while ((int )*p != 10) {
#line 485
      if ((int )*p == 0) {
#line 488
        return ((ustomp_message *)((void *)0));
      }
#line 484
      p = stepThroughBuffer(& readerPos, & writerPos, buffer);
    }


#line 476
    p = buffer->buffer + readerPos;
#line 476
    start = p;
#line 484
    while ((int )*p != 10) {
#line 485
      if ((int )*p == 0) {
#line 488
        return ((ustomp_message *)((void *)0));
      }
#line 484
      p = stepThroughBuffer(& readerPos, & writerPos, buffer);
    }


#line 476
    p = buffer->buffer + readerPos;
#line 476
    start = p;
#line 484
    while ((int )*p != 10) {
#line 485
      if ((int )*p == 0) {
#line 488
        return ((ustomp_message *)((void *)0));
      }
#line 484
      p = stepThroughBuffer(& readerPos, & writerPos, buffer);
    }


#line 848
    _port[0] = (char)0;
#line 848
    tmp___1 = 1U;
#line 848
    while (! (tmp___1 >= 8U)) {
#line 848
      _port[tmp___1] = (char)0;
#line 848
      tmp___1 ++;
    }


#line 1092
  sent = 0;
#line 1093
  left = *len;
#line 1094
  result = 0;
#line 1096
  while (sent < *len) {
#line 1097
    tmp___0 = send(sockfd, (void const   *)(buf + sent), (size_t )left, 0);
#line 1097
    result = (int )tmp___0;
#line 1098
    if (result == -1) {
#line 1099
      break;
    } else
#line 1100
    if (! (result == 0)) {
#line 1103
      sent += result;
#line 1104
      left -= result;
    }
  }


#line 1198
  buffer[0] = (char)0;
#line 1198
  tmp___0 = 1U;
#line 1198
  while (! (tmp___0 >= 65536U)) {
#line 1198
    buffer[tmp___0] = (char)0;
#line 1198
    tmp___0 ++;
  }


  result = 0;
#line 1288
  while (1) {
#line 1289
    tmp___0 = __builtin_va_arg(args, char *);
#line 1289
    key = tmp___0;
#line 1290
    if ((unsigned long )key == (unsigned long )((void *)0)) {
#line 1291
      break;
    }
#line 1292
    tmp___1 = __builtin_va_arg(args, char *);
#line 1292
    val = tmp___1;
#line 1293
    if ((unsigned long )val == (unsigned long )((void *)0)) {
#line 1294
      if ((unsigned long )*headers != (unsigned long )((void *)0)) {
#line 1295
        dictDestroy(headers, 1);
#line 1296
        result = -1;
      }
#line 1298
      break;
    }
#line 1301
    if ((unsigned long )*headers == (unsigned long )((void *)0)) {
#line 1302
      *headers = treeCreate();
    }
#line 1303
    treeDictInsertString(*headers, (char const   *)key, (char const   *)val);
  }

#line 1327
  tmp___0 = 8U;
#line 1327
  while (! (tmp___0 >= 16U)) {
#line 1327
    m.command[tmp___0] = (char)0;
#line 1327
    tmp___0 ++;
  }


#line 223
  node = tree->root;
#line 225
  while (node) {
#line 227
    if (node->key == key) {
#line 228
      return (node->data);
    }
#line 230
    node = node->link[node->key < key];
  }

#line 403
    tmp___0 = 1U;
#line 403
    while (! (tmp___0 >= 64U)) {
#line 403
      fmt[tmp___0] = (char)0;
#line 403
      tmp___0 ++;
    }
#line 404
    snprintf((char * __restrict  )(fmt), (size_t )64, (char const   * __restrict  )"[%s] ",
             "0x%016lx");
#line 405
    fprintf((FILE * __restrict  )fd, (char const   * __restrict  )(fmt), (uintp )node);
#line 410
    while (i < level) {
#line 411
      fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"  ");
#line 410
      i ++;
    }



#line 504
    memset((void *)head, 0, sizeof(RBnode ));
#line 507
    t = head;
#line 508
    p = (RBnode *)((void *)0);
#line 508
    g = p;
#line 509
    q = tree->root;
#line 510
    t->link[1] = q;
#line 513
    while (1) {
#line 515
      if ((unsigned long )q == (unsigned long )((void *)0)) {
#line 518
        q = MakeNode(key, data);
#line 519
        p->link[dir] = q;
#line 521
        if ((unsigned long )q == (unsigned long )((void *)0)) {
#line 522
          free((void *)head);
#line 523
          return (0);
        }
      } else {
#line 528
        t1___0 = q->link[0];
#line 529
        t2 = q->link[1];
#line 530
        tmp___2 = is_red(t1___0);
#line 530
        if (tmp___2) {
#line 530
          tmp___3 = is_red(t2);
#line 530
          if (tmp___3) {
#line 532
            q->red = 1;
#line 533
            t1___0->red = 0;
#line 534
            t2->red = 0;
          }
        }
      }
#line 539
      tmp___6 = is_red(q);
#line 539
      if (tmp___6) {
#line 539
        tmp___7 = is_red(p);
#line 539
        if (tmp___7) {
#line 541
          dir2 = (unsigned long )t->link[1] == (unsigned long )g;
#line 543
          if ((unsigned long )q == (unsigned long )p->link[last]) {
#line 547
            tmp___4 = treeRotate(g, ! last);
#line 547
            t1___1 = tmp___4;
#line 548
            t->link[dir2] = t1___1;
          } else {
#line 554
            tmp___5 = treeDoubleRotate(g, ! last);
#line 554
            t1___2 = tmp___5;
#line 555
            t->link[dir2] = t1___2;
          }
        }
      }
#line 560
      if (q->key == key) {
#line 561
        break;
      }
#line 563
      last = dir;
#line 564
      dir = q->key < key;
#line 567
      if ((unsigned long )g != (unsigned long )((void *)0)) {
#line 568
        t = g;
      }
#line 570
      g = p;
#line 570
      p = q;
#line 571
      q = q->link[dir];
    }


#line 181
  c = (3735928559U + ((uint32_t )length << 2)) + initval;
#line 181
  b = c;
#line 181
  a = b;
#line 184
  while (length > 3UL) {
#line 186
    a += (uint32_t )*(k + 0);
#line 187
    b += (uint32_t )*(k + 1);
#line 188
    c += (uint32_t )*(k + 2);
#line 189
    a -= c;
#line 189
    a ^= (c << 4) | (c >> 28);
#line 189
    c += b;
#line 189
    b -= a;
#line 189
    b ^= (a << 6) | (a >> 26);
#line 189
    a += c;
#line 189
    c -= b;
#line 189
    c ^= (b << 8) | (b >> 24);
#line 189
    b += a;
#line 189
    a -= c;
#line 189
    a ^= (c << 16) | (c >> 16);
#line 189
    c += b;
#line 189
    b -= a;
#line 189
    b ^= (a << 19) | (a >> 13);
#line 189
    a += c;
#line 189
    c -= b;
#line 189
    c ^= (b << 4) | (b >> 28);
#line 189
    b += a;
#line 190
    length -= 3UL;
#line 191
    k += 3;
  }

#line 99
  i = 0;
#line 99
  while ((unsigned int )i < len) {
#line 101
    fprintf((FILE * __restrict  )f, (char const   * __restrict  )"0x%08lx   ", (unsigned long )ptr - base);
#line 102
    j = 0;
#line 102
    while ((unsigned int )j < width) {
#line 103
      setColor(f, ptr, j, base);
#line 105
      if ((unsigned int )(i + j) < len) {
#line 106
        if ((unsigned int )j % columnwidth == columnwidth - 1U) {
#line 106
          tmp___0 = " ";
        } else {
#line 106
          tmp___0 = "";
        }
#line 106
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )"%02X %s", (int )*(ptr + j),
                tmp___0);
      } else {
#line 108
        if ((unsigned int )j % columnwidth == columnwidth - 1U) {
#line 108
          tmp___1 = " ";
        } else {
#line 108
          tmp___1 = "";
        }
#line 108
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )"   %s", tmp___1);
      }
#line 110
      fprintf((FILE * __restrict  )f, (char const   * __restrict  )"\033[0m");
#line 102
      j ++;
    }
#line 112
    fprintf((FILE * __restrict  )f, (char const   * __restrict  )" ");
#line 113
    j = 0;
#line 113
    while ((unsigned int )j < width) {
#line 114
      setColor(f, ptr, j, base);
#line 116
      if ((unsigned int )(i + j) < len) {
#line 117
        if ((unsigned int )j % columnwidth == columnwidth - 1U) {
#line 117
          tmp___2 = " ";
        } else {
#line 117
          tmp___2 = "";
        }
#line 117
        tmp___3 = printableHex(*(ptr + j));
#line 117
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )"%c%s", (int )tmp___3,
                tmp___2);
      } else {
#line 119
        if ((unsigned int )j % columnwidth == columnwidth - 1U) {
#line 119
          tmp___4 = " ";
        } else {
#line 119
          tmp___4 = "";
        }
#line 119
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )" %s", tmp___4);
      }
#line 121
      fprintf((FILE * __restrict  )f, (char const   * __restrict  )"\033[0m");
#line 113
      j ++;
    }
#line 124
    if (twice != 0) {
#line 126
      fprintf((FILE * __restrict  )f, (char const   * __restrict  )"    0x%08lx   ",
              ((unsigned long )ptr - base) + (unsigned long )len);
#line 127
      j = 0;
#line 127
      while ((unsigned int )j < width) {
#line 128
        setColor(f, ptr, (int )((unsigned int )j + len), base);
#line 130
        if ((unsigned int )(i + j) + len < (unsigned int )frontier) {
#line 131
          if (((unsigned int )j + len) % columnwidth == columnwidth - 1U) {
#line 131
            tmp___5 = " ";
          } else {
#line 131
            tmp___5 = "";
          }
#line 131
          fprintf((FILE * __restrict  )f, (char const   * __restrict  )"%02X %s",
                  (int )*(ptr + ((unsigned int )j + len)), tmp___5);
        } else {
#line 133
          if (((unsigned int )j + len) % columnwidth == columnwidth - 1U) {
#line 133
            tmp___6 = " ";
          } else {
#line 133
            tmp___6 = "";
          }
#line 133
          fprintf((FILE * __restrict  )f, (char const   * __restrict  )"   %s", tmp___6);
        }
#line 135
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )"\033[0m");
#line 127
        j ++;
      }
#line 137
      fprintf((FILE * __restrict  )f, (char const   * __restrict  )" ");
#line 138
      j = 0;
#line 138
      while ((unsigned int )j < width) {
#line 139
        setColor(f, ptr, (int )((unsigned int )j + len), base);
#line 141
        if ((unsigned int )(i + j) + len < (unsigned int )frontier) {
#line 142
          if (((unsigned int )j + len) % columnwidth == columnwidth - 1U) {
#line 142
            tmp___7 = " ";
          } else {
#line 142
            tmp___7 = "";
          }
#line 142
          tmp___8 = printableHex(*(ptr + ((unsigned int )j + len)));
#line 142
          fprintf((FILE * __restrict  )f, (char const   * __restrict  )"%c%s", (int )tmp___8,
                  tmp___7);
        }
#line 144
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )"\033[0m");
#line 138
        j ++;
      }
    }
#line 147
    fprintf((FILE * __restrict  )f, (char const   * __restrict  )"\n");
#line 99
    i = (int )((unsigned int )i + width);
#line 99
    ptr += width;
  }
