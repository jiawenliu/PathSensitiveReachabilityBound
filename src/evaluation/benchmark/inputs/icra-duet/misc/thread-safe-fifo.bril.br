#line 73
  _node = que->first;
#line 75
  while ((unsigned long )_node != (unsigned long )((void *)0)) {
#line 79
    free(_node->data);
#line 80
    tmp = _node->next;
#line 81
    free((void *)_node);
#line 82
    _node = tmp;
  }


  i = 0;
#line 34
  while (i < number) {
#line 35
    tmp___0 = malloc((size_t )16);
#line 35
    message = (char *)tmp___0;
#line 36
    tmp___1 = rand();
#line 36
    snprintf((char * __restrict  )message, (size_t )15, (char const   * __restrict  )"rand: %d",
             tmp___1);
#line 37
    enque(q, (void *)message);
#line 34
    i ++;
  }


#line 48
  q = (queue *)args;
#line 51
  while (1) {
#line 51
    data = deque(q);
#line 51
    if (! ((unsigned long )data != (unsigned long )((void *)0))) {
#line 51
      break;
    }
#line 52
    string = (char *)data;
#line 53
    printf((char const   * __restrict  )"DeQued : %s, @%p\n", string, data);
#line 54
    free(data);
  }


#line 70
  i = 0;
#line 70
  while (i < 6) {
#line 71
    arg[i].number = 1000;
#line 72
    arg[i].thread_no = i;
#line 73
    arg[i].q = q;
#line 74
    pthread_create((pthread_t * __restrict  )(threads + i), (pthread_attr_t const   * __restrict  )((void *)0),
                   & func, (void * __restrict  )((void *)(& arg[i])));
#line 70
    i ++;
  }
#line 77
  i = 0;
#line 77
  while (i < 5) {
#line 78
    pthread_create((pthread_t * __restrict  )(thread_d + i), (pthread_attr_t const   * __restrict  )((void *)0),
                   & func_d, (void * __restrict  )((void *)q));
#line 77
    i ++;
  }
#line 81
  i = 0;
#line 81
  while (i < 6) {
#line 82
    pthread_join(*(threads + i), (void **)((void *)0));
#line 81
    i ++;
  }
#line 85
  i = 0;
#line 85
  while (i < 5) {
#line 86
    pthread_join(*(thread_d + i), (void **)((void *)0));
#line 85
    i ++;
  }