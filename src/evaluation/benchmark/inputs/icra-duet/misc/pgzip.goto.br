  unsigned long int __result = (unsigned long int)0;
  while((signed int)__s[(signed long int)__result] == __accept)
  {
    __result = __result + 1ul;
    __result;
  }



  if(__s == ((char *)NULL))
    __s = *__nextp;

  while(*__s == __sep)
  {
    __s = __s + 1l;
    __s;
  }


    tmp_post$1 = __s;
    __s = __s + 1l;
    __result = tmp_post$1;
    while(!((signed int)*__s == 0))
    {
      tmp_post$2 = __s;
      __s = __s + 1l;
      if(!(*tmp_post$2 == __sep))
        goto __CPROVER_DUMP_L4;

      __s[(signed long int)-1] = (char)0;
      goto __CPROVER_DUMP_L5;

    __CPROVER_DUMP_L4:
      ;
    }




  max_blindex = 19 - 1;
  while(max_blindex >= 3)
  {
    if((signed int)tc->bl_tree[(signed long int)bl_order[(signed long int)max_blindex]].dl.len != 0)
      goto __CPROVER_DUMP_L2;

    max_blindex = max_blindex - 1;
  }



  signed int tmp_if_expr$1;
  while(tc->heap_len < 2)
  {
    signed int new;
    tc->heap_len = tc->heap_len + 1;
    if(max_code < 2)
    {
      max_code = max_code + 1;
      tmp_if_expr$1 = max_code;
    }

    else
      tmp_if_expr$1 = 0;
    tc->heap[(signed long int)tc->heap_len] = tmp_if_expr$1;
    new = tc->heap[(signed long int)tc->heap_len];
    (tree + (signed long int)new)->fc.freq = (unsigned short int)1;
    tc->depth[(signed long int)new] = (unsigned char)0;
    tc->opt_len = tc->opt_len - 1ul;
    if(!(stree == ((struct ct_data *)NULL)))
      tc->static_len = tc->static_len - (unsigned long int)(stree + (signed long int)new)->dl.len;

  }
  desc->max_code = max_code;
  n = tc->heap_len / 2;
  while(n >= 1)
  {
    pqdownheap(tree, n, tc);
    n = n - 1;
  }




  signed int tmp_post$2;
  signed int tmp_if_expr$3;
  signed int tmp_post$4;
  do
  {
    n = tc->heap[(signed long int)1];
    tmp_post$2 = tc->heap_len;
    tc->heap_len = tc->heap_len - 1;
    tc->heap[(signed long int)1] = tc->heap[(signed long int)tmp_post$2];
    pqdownheap(tree, 1, tc);
    m = tc->heap[(signed long int)1];
    tc->heap_max = tc->heap_max - 1;
    tc->heap[(signed long int)tc->heap_max] = n;
    tc->heap_max = tc->heap_max - 1;
    tc->heap[(signed long int)tc->heap_max] = m;
    (tree + (signed long int)node)->fc.freq = (unsigned short int)((signed int)(tree + (signed long int)n)->fc.freq + (signed int)(tree + (signed long int)m)->fc.freq);
    if((signed int)tc->depth[(signed long int)n] >= (signed int)tc->depth[(signed long int)m])
      tmp_if_expr$3 = (signed int)tc->depth[(signed long int)n];

    else
      tmp_if_expr$3 = (signed int)tc->depth[(signed long int)m];
    tc->depth[(signed long int)node] = (unsigned char)(tmp_if_expr$3 + 1);
    (tree + (signed long int)m)->dl.dad = (unsigned short int)node;
    (tree + (signed long int)n)->dl.dad = (tree + (signed long int)m)->dl.dad;
    tmp_post$4 = node;
    node = node + 1;
    tc->heap[(signed long int)1] = tmp_post$4;
    pqdownheap(tree, 1, tc);
  }
  while(tc->heap_len >= 2);





  signed int i = 0;
  while(!((unsigned int)i >= num_threads_in_pool))
  {
    struct _spec_thread$link23 *th;
    th=new_spec_thread(i, pool);
    enqueue(pool->free_threads, (void *)th);
    i = i + 1;
  }



  length = 0;
  code = 0;
  signed int tmp_post$1;
  while(code < 28)
  {
    tc->base_length[(signed long int)code] = length;
    n = 0;
    while(!(n >= 1 << extra_lbits[(signed long int)code]))
    {
      tmp_post$1 = length;
      length = length + 1;
      tc->length_code[(signed long int)tmp_post$1] = (unsigned char)code;
      n = n + 1;
    }
    code = code + 1;
  }




  dist = 0;
  code = 0;
  signed int tmp_post$2;
  while(code < 16)
  {
    tc->base_dist[(signed long int)code] = dist;
    n = 0;
    while(!(n >= 1 << extra_dbits[(signed long int)code]))
    {
      tmp_post$2 = dist;
      dist = dist + 1;
      tc->dist_code[(signed long int)tmp_post$2] = (unsigned char)code;
      n = n + 1;
    }
    code = code + 1;
  }






  dist = dist >> 7;
  signed int tmp_post$3;
  while(code < 30)
  {
    tc->base_dist[(signed long int)code] = dist << 7;
    n = 0;
    while(!(n >= 1 << -7 + extra_dbits[(signed long int)code]))
    {
      tmp_post$3 = dist;
      dist = dist + 1;
      tc->dist_code[(signed long int)(256 + tmp_post$3)] = (unsigned char)code;
      n = n + 1;
    }
    code = code + 1;
  }
  if(!(dist == 256))
    error("ct_init: 256+dist != 512");

  bits = 0;
  while(bits <= 15)
  {
    tc->bl_count[(signed long int)bits] = (unsigned short int)0;
    bits = bits + 1;
  }
  n = 0;
  signed int tmp_post$4;
  while(n <= 143)
  {
    tmp_post$4 = n;
    n = n + 1;
    tc->static_ltree[(signed long int)tmp_post$4].dl.len = (unsigned short int)8;
    tc->bl_count[(signed long int)8] = tc->bl_count[(signed long int)8] + 1;
  }
  signed int tmp_post$5;
  while(n <= 255)
  {
    tmp_post$5 = n;
    n = n + 1;
    tc->static_ltree[(signed long int)tmp_post$5].dl.len = (unsigned short int)9;
    tc->bl_count[(signed long int)9] = tc->bl_count[(signed long int)9] + 1;
  }
  signed int tmp_post$6;
  while(n <= 279)
  {
    tmp_post$6 = n;
    n = n + 1;
    tc->static_ltree[(signed long int)tmp_post$6].dl.len = (unsigned short int)7;
    tc->bl_count[(signed long int)7] = tc->bl_count[(signed long int)7] + 1;
  }
  signed int tmp_post$7;
  while(n <= 287)
  {
    tmp_post$7 = n;
    n = n + 1;
    tc->static_ltree[(signed long int)tmp_post$7].dl.len = (unsigned short int)8;
    tc->bl_count[(signed long int)8] = tc->bl_count[(signed long int)8] + 1;
  }
  gen_codes((struct ct_data *)tc->static_ltree, 256 + 1 + 29 + 1, tc);
  n = 0;
  while(n < 30)
  {
    tc->static_dtree[(signed long int)n].dl.len = (unsigned short int)5;
    unsigned int return_value_bi_reverse$8;
    return_value_bi_reverse$8=bi_reverse((unsigned int)n, 5);
    tc->static_dtree[(signed long int)n].fc.code = (unsigned short int)return_value_bi_reverse$8;
    n = n + 1;
  }



  signed int first_pass = 0;
  signed int quit_flag = 0;
  i = 0;
  while(!((unsigned int)i == gc->number_of_threads))
  {
    if(gc->bytes_to_read > 0ul)
    {
      struct thread_context *deflate$$1$$1$$1$$tc;
      deflate$$1$$1$$1$$tc=grab_another_block(gc, (struct thread_context *)NULL);
      thread_context_init(deflate$$1$$1$$1$$tc);
      if(!(deflate$$1$$1$$1$$tc == ((struct thread_context *)NULL)))
        goto __CPROVER_DUMP_L2;

      goto __CPROVER_DUMP_L5;

    __CPROVER_DUMP_L2:
      ;
      dispatch(gc->pool, deflate_work, (void *)deflate$$1$$1$$1$$tc);
    }

    else
      goto __CPROVER_DUMP_L5;
    i = i + 1;
  }






    do
    {
      return_value_queue_empty$1=queue_empty(gc->pool->pending_job_requests);
      if(return_value_queue_empty$1 == 0)
        goto __CPROVER_DUMP_L8;

      return_value_queue_empty$2=queue_empty(gc->pool->completed_threads);
      if(return_value_queue_empty$2 == 0)
        goto __CPROVER_DUMP_L8;

      if(gc->pool->shutdown != 0)
        goto __CPROVER_DUMP_L8;

      pthread_cond_wait(&gc->pool->pending_job_requests_cond, &gc->pool->pending_job_requests_lock);
    }
    while(TRUE);
    do
    {

    __CPROVER_DUMP_L8:
      ;
      return_value_queue_empty$3=queue_empty(gc->pool->pending_job_requests);
      if(return_value_queue_empty$3 != 0)
        goto __CPROVER_DUMP_L10;

      return_value_queue_empty$4=queue_empty(gc->pool->free_threads);
      if(return_value_queue_empty$4 != 0)
        goto __CPROVER_DUMP_L10;

      struct _spec_thread *th;
      void *return_value_dequeue$5;
      return_value_dequeue$5=dequeue(gc->pool->free_threads);
      th = (struct _spec_thread *)return_value_dequeue$5;
      struct work_st *deflate$$1$$2$$1$$work;
      void *return_value_dequeue$6;
      return_value_dequeue$6=dequeue(gc->pool->pending_job_requests);
      deflate$$1$$2$$1$$work = (struct work_st *)return_value_dequeue$6;
      if(!(th->busy == 0))
        error("Why is thread Busy?");

      pthread_mutex_lock(&th->thread_lock);
      th->work = (void *)deflate$$1$$2$$1$$work;
      th->busy = 1;
      struct _spec_thread **p = (struct _spec_thread **)gc->pool->busy_threads;
      p[(signed long int)th->thread_id] = th;
      pthread_mutex_unlock(&th->thread_lock);
      pthread_cond_signal(&th->thread_cond);
    }
    while(TRUE);



      while((unsigned int)gc->processed_blocks->head->index == gc->next_block_to_output)
      {
        if(gc->last_block_number == (unsigned int)gc->processed_blocks->head->index)
          quit_flag = 1;

        if(first_pass == 0)
        {
          pthread_mutex_lock(&gc->output_block_lock);
          first_pass = 1;
        }

        gc->next_block_to_output = gc->next_block_to_output + (unsigned int)1;
        gc->blocks_read = gc->blocks_read - (unsigned int)1;
        void *block;
        void *return_value_pop_top$12;
        return_value_pop_top$12=pop_top(gc->processed_blocks);
        block = (void *)return_value_pop_top$12;
        enqueue(gc->output_queue, block);
        if(!(gc->processed_blocks->head == ((struct sorted_linked_list_node$link8 *)NULL)))
          goto __CPROVER_DUMP_L19;

        goto __CPROVER_DUMP_L20;

      __CPROVER_DUMP_L19:
        ;
      }




  while(TRUE)
  {
    pthread_mutex_lock(&c->thread_lock);
    while(c->shutdown == 0)
    {
      if(!(c->busy == 0))
        goto __CPROVER_DUMP_L3;

      pthread_cond_wait(&c->thread_cond, &c->thread_lock);
    }

  __CPROVER_DUMP_L3:
    ;
    if(!(c->shutdown == 0))
    {
      pthread_mutex_unlock(&c->thread_lock);
      pthread_exit(NULL);
    }

    struct work_st *job = (struct work_st *)c->work;
    job->routine(job->arg);
    c->busy = 0;
    pthread_mutex_unlock(&c->thread_lock);
    pthread_mutex_lock(&c->pool->completed_threads_lock);
    enqueue(c->pool->completed_threads, (void *)&c->thread_id);
    pthread_mutex_unlock(&c->pool->completed_threads_lock);
    pthread_cond_signal(&c->pool->pending_job_requests_cond);
  }




  unsigned int total_bytes_read = (unsigned int)0;
  unsigned int total_bytes_left = size;
  while(!(total_bytes_left == 0u))
  {
    signed long int return_value_read$1;
    return_value_read$1=read(gc->ifd, (void *)(buf + (signed long int)total_bytes_read), (unsigned long int)total_bytes_left);
    len = (unsigned int)return_value_read$1;
    if(len == 4294967295u)
      error("read error");

    total_bytes_left = total_bytes_left - len;
    total_bytes_read = total_bytes_read + len;
  }




  unsigned int len;
  tc->insize = (unsigned int)0;
  while(TRUE)
  {
    if(32768u + -tc->insize >= tc->full_input_buffer_remaining_bytes)
      goto __CPROVER_DUMP_L2;

    len = (unsigned int)32768 - tc->insize;
    goto __CPROVER_DUMP_L3;

  __CPROVER_DUMP_L2:
    ;
    len = tc->full_input_buffer_remaining_bytes;

  __CPROVER_DUMP_L3:
    ;
    memcpy((void *)((char *)tc->inbuf + (signed long int)tc->insize), (const void *)(tc->full_input_buffer + (signed long int)tc->full_input_buffer_bytes_read), (unsigned long int)len);
    tc->full_input_buffer_bytes_read = tc->full_input_buffer_bytes_read + len;
    tc->full_input_buffer_remaining_bytes = tc->full_input_buffer_remaining_bytes - len;
    if(len == 0u)
      goto __CPROVER_DUMP_L4;

    tc->insize = tc->insize + len;
    if(!(tc->insize < 32768u))
      break;

  }



      tc->match_start = tc->match_start - (unsigned int)32768;
      tc->strstart = tc->strstart - (unsigned int)32768;
      tc->block_start = tc->block_start - (signed long int)32768;
      n = (unsigned int)0;
      while(n < 16384u)
      {
        m = (unsigned int)tc->head[(signed long int)n];
        tc->head[(signed long int)n] = (unsigned short int)(m >= (unsigned int)32768 ? m - (unsigned int)32768 : (unsigned int)0);
        n = n + 1u;
      }
      n = (unsigned int)0;
      while(n < 32768u)
      {
        m = (unsigned int)tc->prev[(signed long int)n];
        tc->prev[(signed long int)n] = (unsigned short int)(m >= (unsigned int)32768 ? m - (unsigned int)32768 : (unsigned int)0);
        n = n + 1u;
      }



          while(__cnt > 0ul)
          {
            signed int __c;
            if(__stream->_IO_read_ptr >= __stream->_IO_read_end)
            {
              return_value___uflow$3=__uflow(__stream);
              tmp_if_expr$5 = return_value___uflow$3;
            }

            else
            {
              tmp_post$4 = __stream->_IO_read_ptr;
              __stream->_IO_read_ptr = __stream->_IO_read_ptr + 1l;
              tmp_if_expr$5 = (signed int)*((unsigned char *)tmp_post$4);
            }
            __c = tmp_if_expr$5;
            if(!(__c == -1))
              goto __CPROVER_DUMP_L8;

            goto __CPROVER_DUMP_L9;

          __CPROVER_DUMP_L8:
            ;
            tmp_post$6 = __cptr;
            __cptr = __cptr + 1l;
            *tmp_post$6 = (char)__c;
            __cnt = __cnt - 1ul;
          }




  h = tc->heap_max + 1;
  while(h < 573)
  {
    n = tc->heap[(signed long int)h];
    bits = (signed int)(tree + (signed long int)(tree + (signed long int)n)->dl.dad)->dl.len + 1;
    if(!(max_length >= bits))
    {
      bits = max_length;
      overflow = overflow + 1;
    }

    (tree + (signed long int)n)->dl.len = (unsigned short int)bits;
    if(max_code >= n)
    {
      tc->bl_count[(signed long int)bits] = tc->bl_count[(signed long int)bits] + 1;
      xbits = 0;
      if(n >= base)
        xbits = extra[(signed long int)(n - base)];

      f = (tree + (signed long int)n)->fc.freq;
      tc->opt_len = tc->opt_len + (unsigned long int)f * (unsigned long int)(bits + xbits);
      if(!(stree == ((struct ct_data *)NULL)))
        tc->static_len = tc->static_len + (unsigned long int)f * (unsigned long int)((signed int)(stree + (signed long int)n)->dl.len + xbits);

    }

    h = h + 1;
  }





  bits = max_length;
  while(!(bits == 0))
  {
    n = (signed int)tc->bl_count[(signed long int)bits];
    while(!(n == 0))
    {
      h = h - 1;
      m = tc->heap[(signed long int)h];
      if(max_code >= m)
      {
        if(!((unsigned int)(tree + (signed long int)m)->dl.len == (unsigned int)bits))
        {
          tc->opt_len = tc->opt_len + (unsigned long int)(((signed long int)bits - (signed long int)(tree + (signed long int)m)->dl.len) * (signed long int)(tree + (signed long int)m)->fc.freq);
          (tree + (signed long int)m)->dl.len = (unsigned short int)bits;
        }

        n = n - 1;
      }

    }
    bits = bits - 1;
  }



  n = 0;
  unsigned short int tmp_post$1;
  while(max_code >= n)
  {
    signed int len = (signed int)(tree + (signed long int)n)->dl.len;
    if(!(len == 0))
    {
      tmp_post$1 = next_code[(signed long int)len];
      next_code[(signed long int)len] = next_code[(signed long int)len] + 1;
      unsigned int return_value_bi_reverse$2;
      return_value_bi_reverse$2=bi_reverse((unsigned int)tmp_post$1, len);
      (tree + (signed long int)n)->fc.code = (unsigned short int)return_value_bi_reverse$2;
    }

    n = n + 1;
  }



  struct sorted_linked_list_node$link15 *cur = list_to_insert_into->head;
  struct sorted_linked_list_node$link15 *prev = (struct sorted_linked_list_node$link15 *)NULL;
  while(!(cur == ((struct sorted_linked_list_node$link15 *)NULL)))
  {
    if(!(index >= cur->index))
    {
      new_node->next = cur;
      if(!(prev == ((struct sorted_linked_list_node$link15 *)NULL)))
        prev->next = new_node;

      else
        list_to_insert_into->head = new_node;
      return;
    }

    prev = cur;
    cur = cur->next;
  }



  void *data = NULL;
  while(!(cur == ((struct sorted_linked_list_node$link15 *)NULL)))
  {
    if(cur->index == index)
    {
      list->length = list->length - (unsigned int)1;
      data = cur->data;
      if(prev == ((struct sorted_linked_list_node$link15 *)NULL))
        list->head = cur->next;

      else
        prev->next = cur->next;
      free((void *)cur);
      return data;
    }

    prev = cur;
    cur = cur->next;
  }





  signed int n;
  signed int prevlen = -1;
  signed int curlen;
  signed int nextlen = (signed int)(tree + (signed long int)0)->dl.len;
  signed int count = 0;
  signed int max_count = 7;
  signed int min_count = 4;
  if(nextlen == 0)
  {
    max_count = 138;
    min_count = 3;
  }

  (tree + (signed long int)(max_code + 1))->dl.len = (unsigned short int)65535;
  n = 0;
  while(max_code >= n)
  {
    curlen = nextlen;
    nextlen = (signed int)(tree + (signed long int)(n + 1))->dl.len;
    count = count + 1;
    if(curlen == nextlen && !(count >= max_count))
      goto __CPROVER_DUMP_L11;

    else
      if(!(count >= min_count))
        tc->bl_tree[(signed long int)curlen].fc.freq = tc->bl_tree[(signed long int)curlen].fc.freq + (unsigned short int)count;

      else
        if(!(curlen == 0))
        {
          if(!(curlen == prevlen))
            tc->bl_tree[(signed long int)curlen].fc.freq = tc->bl_tree[(signed long int)curlen].fc.freq + 1;

          tc->bl_tree[(signed long int)16].fc.freq = tc->bl_tree[(signed long int)16].fc.freq + 1;
        }

        else
          if(count <= 10)
            tc->bl_tree[(signed long int)17].fc.freq = tc->bl_tree[(signed long int)17].fc.freq + 1;

          else
            tc->bl_tree[(signed long int)18].fc.freq = tc->bl_tree[(signed long int)18].fc.freq + 1;
    count = 0;
    prevlen = curlen;
    if(nextlen == 0)
    {
      max_count = 138;
      min_count = 3;
    }

    else
      if(curlen == nextlen)
      {
        max_count = 6;
        min_count = 3;
      }

      else
      {
        max_count = 7;
        min_count = 4;
      }

  __CPROVER_DUMP_L11:
    ;
    n = n + 1;
  }


  while(!(*t == 0))
  {
    signed int __res;
    if(FALSE)
    {
      if(FALSE)
      {
        signed int __c = (signed int)*t;
        if(!(__c < -128))
        {
          if(__c > 255)
            goto __CPROVER_DUMP_L2;

        }

        else
        {

        __CPROVER_DUMP_L2:
          ;
          tmp_if_expr$3 = __c;
          goto __CPROVER_DUMP_L4;
        }
        const signed int **return_value___ctype_tolower_loc$2;
        return_value___ctype_tolower_loc$2=__ctype_tolower_loc();
        tmp_if_expr$3 = (*return_value___ctype_tolower_loc$2)[(signed long int)__c];

      __CPROVER_DUMP_L4:
        ;
        __res = tmp_if_expr$3;
      }

      else
        __res=tolower((signed int)*t);
    }

    else
    {
      return_value___ctype_tolower_loc$4=__ctype_tolower_loc();
      __res = (*return_value___ctype_tolower_loc$4)[(signed long int)(signed int)*t];
    }
    tmp_statement_expression$1 = __res;
    *t = (char)tmp_statement_expression$1;
    t = t + 1l;
  }




      do
      {
        tmp_post$1 = s;
        s = s + 1l;
        c = crc_32_tab[(signed long int)(((signed int)c ^ (signed int)*tmp_post$1) & 255)] ^ c >> 8;
        n = n - 1u;
      }
      while(n != 0u);

