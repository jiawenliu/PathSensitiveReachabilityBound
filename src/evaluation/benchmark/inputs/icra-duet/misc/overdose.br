#line 132
  while ((unsigned long )ptr > (unsigned long )s___0) {
#line 134
    ptr --;
#line 135
    if ((int )*ptr == 10) {
#line 136
      *ptr = (char )'\000';
    } else
#line 135
    if ((int )*ptr == 32) {
#line 136
      *ptr = (char )'\000';
    } else {
#line 137
      break;
    }
  }

#line 132
  while ((unsigned long )ptr > (unsigned long )s___0) {
#line 134
    ptr --;
#line 135
    if ((int )*ptr == 10) {
#line 136
      *ptr = (char )'\000';
    } else
#line 135
    if ((int )*ptr == 32) {
#line 136
      *ptr = (char )'\000';
    } else {
#line 137
      break;
    }
  }


while(1){
#line 146
    tmp___2 = strlen((char const   *)ptr);
#line 146
    if (! (tmp___2 > (size_t )cols)) {
#line 146
      break;
    }
#line 148
    tmp___1 = strchr((char const   *)ptr, '\n');
#line 148
    if (tmp___1) {
#line 148
      break;
    }
#line 149
    spc = ptr + cols;
#line 150
    while ((unsigned long )spc > (unsigned long )ptr) {
#line 152
      if ((int )*spc == 32) {
#line 153
        break;
      } else {
#line 155
        spc --;
      }
    }
#line 157
    if ((unsigned long )spc > (unsigned long )ptr) {
#line 159
      n = (int )(spc - ptr);
#line 160
      strncat((char * __restrict  )buf, (char const   * __restrict  )ptr, (size_t )n);
#line 161
      strcatl(buf, "\n", (size_t )2048);
#line 162
      ptr = spc + 1;
#line 163
      while (1) {
#line 163
        if (*ptr) {
#line 163
          if (! ((int )*ptr == 32)) {
#line 163
            break;
          }
        } else {
#line 163
          break;
        }
#line 163
        ptr ++;
      }
#line 164
      cols = mcol;
    } else {
#line 168
      strncat((char * __restrict  )buf, (char const   * __restrict  )ptr, (size_t )cols);
#line 169
      strcatl(buf, "\n", (size_t )2048);
#line 170
      ptr += cols;
#line 171
      while (1) {
#line 171
        if (*ptr) {
#line 171
          if (! ((int )*ptr == 32)) {
#line 171
            break;
          }
        } else {
#line 171
          break;
        }
#line 171
        ptr ++;
      }
#line 172
      cols = mcol;
    }
  }


while(1){

#line 146
    tmp___2 = strlen((char const   *)ptr);
#line 146
    if (! (tmp___2 > (size_t )cols)) {
#line 146
      break;
    }
#line 148
    tmp___1 = strchr((char const   *)ptr, '\n');
#line 148
    if (tmp___1) {
#line 148
      break;
    }
#line 149
    spc = ptr + cols;
#line 150
    while ((unsigned long )spc > (unsigned long )ptr) {
#line 152
      if ((int )*spc == 32) {
#line 153
        break;
      } else {
#line 155
        spc --;
      }
    }
#line 157
    if ((unsigned long )spc > (unsigned long )ptr) {
#line 159
      n = (int )(spc - ptr);
#line 160
      strncat((char * __restrict  )buf, (char const   * __restrict  )ptr, (size_t )n);
#line 161
      strcatl(buf, "\n", (size_t )2048);
#line 162
      ptr = spc + 1;
#line 163
      while (1) {
#line 163
        if (*ptr) {
#line 163
          if (! ((int )*ptr == 32)) {
#line 163
            break;
          }
        } else {
#line 163
          break;
        }
#line 163
        ptr ++;
      }
#line 164
      cols = mcol;
    } else {
#line 168
      strncat((char * __restrict  )buf, (char const   * __restrict  )ptr, (size_t )cols);
#line 169
      strcatl(buf, "\n", (size_t )2048);
#line 170
      ptr += cols;
#line 171
      while (1) {
#line 171
        if (*ptr) {
#line 171
          if (! ((int )*ptr == 32)) {
#line 171
            break;
          }
        } else {
#line 171
          break;
        }
#line 171
        ptr ++;
      }
#line 172
      cols = mcol;
    }
  }



while(1){

#line 146
    tmp___2 = strlen((char const   *)ptr);
#line 146
    if (! (tmp___2 > (size_t )cols)) {
#line 146
      break;
    }
#line 148
    tmp___1 = strchr((char const   *)ptr, '\n');
#line 148
    if (tmp___1) {
#line 148
      break;
    }
#line 149
    spc = ptr + cols;
#line 150
    while ((unsigned long )spc > (unsigned long )ptr) {
#line 152
      if ((int )*spc == 32) {
#line 153
        break;
      } else {
#line 155
        spc --;
      }
    }
#line 157
    if ((unsigned long )spc > (unsigned long )ptr) {
#line 159
      n = (int )(spc - ptr);
#line 160
      strncat((char * __restrict  )buf, (char const   * __restrict  )ptr, (size_t )n);
#line 161
      strcatl(buf, "\n", (size_t )2048);
#line 162
      ptr = spc + 1;
#line 163
      while (1) {
#line 163
        if (*ptr) {
#line 163
          if (! ((int )*ptr == 32)) {
#line 163
            break;
          }
        } else {
#line 163
          break;
        }
#line 163
        ptr ++;
      }
#line 164
      cols = mcol;
    } else {
#line 168
      strncat((char * __restrict  )buf, (char const   * __restrict  )ptr, (size_t )cols);
#line 169
      strcatl(buf, "\n", (size_t )2048);
#line 170
      ptr += cols;
#line 171
      while (1) {
#line 171
        if (*ptr) {
#line 171
          if (! ((int )*ptr == 32)) {
#line 171
            break;
          }
        } else {
#line 171
          break;
        }
#line 171
        ptr ++;
      }
#line 172
      cols = mcol;
    }
  }

#line 116
  while (x < argc) {
#line 146
    tmp___2 = strlen((char const   *)ptr);
#line 146
    if (! (tmp___2 > (size_t )cols)) {
#line 146
      break;
    }
#line 148
    tmp___1 = strchr((char const   *)ptr, '\n');
#line 148
    if (tmp___1) {
#line 148
      break;
    }
#line 149
    spc = ptr + cols;
#line 150
    while ((unsigned long )spc > (unsigned long )ptr) {
#line 152
      if ((int )*spc == 32) {
#line 153
        break;
      } else {
#line 155
        spc --;
      }
    }
#line 157
    if ((unsigned long )spc > (unsigned long )ptr) {
#line 159
      n = (int )(spc - ptr);
#line 160
      strncat((char * __restrict  )buf, (char const   * __restrict  )ptr, (size_t )n);
#line 161
      strcatl(buf, "\n", (size_t )2048);
#line 162
      ptr = spc + 1;
#line 163
      while (1) {
#line 163
        if (*ptr) {
#line 163
          if (! ((int )*ptr == 32)) {
#line 163
            break;
          }
        } else {
#line 163
          break;
        }
#line 163
        ptr ++;
      }
#line 164
      cols = mcol;
    } else {
#line 168
      strncat((char * __restrict  )buf, (char const   * __restrict  )ptr, (size_t )cols);
#line 169
      strcatl(buf, "\n", (size_t )2048);
#line 170
      ptr += cols;
#line 171
      while (1) {
#line 171
        if (*ptr) {
#line 171
          if (! ((int )*ptr == 32)) {
#line 171
            break;
          }
        } else {
#line 171
          break;
        }
#line 171
        ptr ++;
      }
#line 172
      cols = mcol;
    }
  }



#line 170
  i = 0;
#line 170
  while (i < l - 1) {
#line 171
    oasprintf(& str, (char *)"%s, ", *(users + i));
#line 172
    strcat((char * __restrict  )txt, (char const   * __restrict  )str);
#line 173
    free((void *)str);
#line 170
    i ++;
  }


#line 209
  i = 0;
#line 209
  ii = 0;
#line 209
  while ((int )*(str + i) != 0) {
#line 211
    tmp___3 = strlen((char const   *)start);
#line 211
    tmp___4 = strncmp((char const   *)(str + i), (char const   *)start, tmp___3);
#line 211
    if (tmp___4 == 0) {
#line 214
      a = i;
#line 214
      while ((int )*(str + a) != 0) {
#line 215
        tmp___2 = strncmp((char const   *)((str + startlen) + a), (char const   *)end,
                          (size_t )endlen);
#line 215
        if (tmp___2 == 0) {
#line 217
          i = ((startlen + a) + endlen) - 1;
#line 218
          ii --;
#line 219
          goto endloop;
        }
#line 214
        a ++;
      }
    }
#line 222
    *(str2 + ii) = *(str + i);
#line 223
    tmp___5 = realloc((void *)str2, (unsigned long )(ii + 2) * sizeof(char ));
#line 223
    str2 = (char *)tmp___5;
    endloop: 
#line 209
    i ++;
#line 209
    ii ++;
  }


#line 234
  i = 0;
#line 234
  ii = 0;
#line 234
  while ((int )*(str + i) != 0) {
#line 236
    tmp___1 = strncmp((char const   *)(str + i), (char const   *)rem, (size_t )len);
#line 236
    if (tmp___1 == 0) {
#line 238
      i = (i + len) - 1;
#line 239
      ii --;
#line 240
      goto endloop;
    }
#line 242
    *(str2 + ii) = *(str + i);
#line 243
    tmp___2 = realloc((void *)str2, (unsigned long )(ii + 2) * sizeof(char ));
#line 243
    str2 = (char *)tmp___2;
    endloop: 
#line 234
    i ++;
#line 234
    ii ++;
  }

#line 334
      i = 0;
#line 334
      i2 = 0;
#line 334
      while (i < c___0) {
#line 337
        ii = 0;
#line 337
        while (ii < userc) {
#line 338
          tmp___1 = strcmp((char const   *)*(users + ii), (char const   *)*(data2 + i * 6));
#line 338
          if (tmp___1 == 0) {
#line 340
            i2 --;
#line 341
            goto endadd;
          }
#line 337
          ii ++;
        }
#line 343
        tmp___2 = realloc((void *)users, (unsigned long )((userc + i2) + 2) * sizeof(char *));
#line 343
        users = (char **)tmp___2;
#line 344
        tmp___3 = strlen((char const   *)*(data2 + i * 6));
#line 344
        tmp___4 = malloc((tmp___3 + 1UL) * sizeof(char ));
#line 344
        *(users + (userc + i2)) = (char *)tmp___4;
#line 345
        tmp___5 = strlen((char const   *)*(data2 + i * 6));
#line 345
        strncpy((char * __restrict  )*(users + (userc + i2)), (char const   * __restrict  )*(data2 + i * 6),
                tmp___5 + 1UL);
#line 346
        *(users + ((userc + i2) + 1)) = (char *)0;
        endadd: 
#line 334
        i ++;
#line 334
        i2 ++;
      }
#line 452
  buf[0] = (char )'\000';
#line 452
  buf[1] = (char )'\000';
#line 452
  buf[2] = (char )'\000';
#line 452
  tmp = 3U;
#line 452
  while (! (tmp >= 2048U)) {
#line 452
    buf[tmp] = (char)0;
#line 452
    tmp ++;
  }

#line 453
  temp[0] = (char )'\000';
#line 453
  temp[1] = (char )'\000';
#line 453
  temp[2] = (char )'\000';
#line 453
  tmp___0 = 3U;
#line 453
  while (! (tmp___0 >= 80U)) {
#line 453
    temp[tmp___0] = (char)0;
#line 453
    tmp___0 ++;
  }


#line 459
  while (1) {
#line 459
    tmp___3 = fgets((char * __restrict  )(temp), 2, (FILE * __restrict  )popen_in);
#line 459
    if (tmp___3) {
#line 459
      tmp___4 = strlen((char const   *)(buf));
#line 459
      if (! (tmp___4 < 800UL)) {
#line 459
        break;
      }
    } else {
#line 459
      break;
    }


#line 496
  i = 0;
#line 496
  while (1) {
#line 498
    tmp___0 = fgetc(f);
#line 498
    c___0 = (char )tmp___0;
#line 499
    if ((int )c___0 == 10) {
#line 500
      break;
    } else
#line 499
    if ((int )c___0 == -1) {
#line 500
      break;
    }
#line 501
    *(line + i) = c___0;
#line 502
    tmp___1 = realloc((void *)line, (unsigned long )(i + 3) * sizeof(char ));
#line 502
    line = (char *)tmp___1;
#line 496
    i ++;
  }


#line 681
  while (1) {
#line 684
    tmp___2 = guigetln(& txt, 1);
#line 684
    if (tmp___2 == 0) {
#line 686
      free((void *)txt);
#line 687
      goto __Cont;
    }
#line 689
    if ((int )*(txt + 0) == 47) {
#line 691
      txt2 = txt + 1;
#line 692
      if ((int )*(txt2 + 0) == 0) {
#line 693
        printusers();
      } else {
#line 696
        tmp___3 = strsep((char ** __restrict  )(& txt2), (char const   * __restrict  )" ");
#line 696
        cmd = tmp___3;
#line 697
        command(cmd, txt2);
      }
    } else {
#line 701
      ysay(s, txt);
    }
#line 702
    free((void *)txt);
    __Cont: /* CIL Label */ ;
  }


#line 207
  i = 0;
#line 207
  while (i < 16) {
#line 208
    X[i] = (md5_word_t )((((int const   )*(xp + 0) + ((int const   )*(xp + 1) << 8)) + ((int const   )*(xp + 2) << 16)) + ((int const   )*(xp + 3) << 24));
#line 207
    i ++;
#line 207
    xp += 4;
  }


#line 384
  while (left >= 64) {
#line 385
    md5_process(pms, p);
#line 384
    p += 64;
#line 384
    left -= 64;
  }


#line 405
  i = 0;
#line 405
  while (i < 8) {
#line 406
    data[i] = (md5_byte_t )(pms->count[i >> 2] >> ((i & 3) << 3));
#line 405
    i ++;
  }

#line 411
  i = 0;
#line 411
  while (i < 16) {
#line 412
    *(digest + i) = (md5_byte_t )(pms->abcd[i >> 2] >> ((i & 3) << 3));
#line 411
    i ++;
  }


#line 73
  while (offset < limit) {
#line 75
    tmp = memchr((void const   *)delims, (int )*c, delim_count);
#line 75
    if ((unsigned long )((void *)0) != (unsigned long )tmp) {
#line 79
      ret = mem;
#line 80
      mem = c + 1;
#line 81
      *found = offset - offset_now;
#line 82
      offset_now = offset + 1UL;
#line 83
      return (ret);
    }
#line 73
    offset ++;
#line 73
    c ++;
  }


#line 41
  i = 0;
#line 41
  while (i < 80) {
#line 42
    ctx->W[i] = (uint32 )0;
#line 41
    i ++;
  }

#line 51
  i = 0;
#line 51
  while (i < len) {
#line 52
    ctx->W[ctx->lenW / 4] <<= 8;
#line 53
    ctx->W[ctx->lenW / 4] |= (uint32 )*(dataIn + i);
#line 54
    (ctx->lenW) ++;
#line 54
    if (ctx->lenW % 64 == 0) {
#line 55
      shaHashBlock(ctx);
#line 56
      ctx->lenW = 0;
    }
#line 58
    ctx->sizeLo += 8U;
#line 59
    ctx->sizeHi += (uint32 )(ctx->sizeLo < 8U);
#line 51
    i ++;
  }


#line 81
  while (ctx->lenW != 56) {
#line 82
    shaUpdate(ctx, & pad0x00, 1);
  }
#line 83
  shaUpdate(ctx, padlen, 8);
#line 87
  i = 0;
#line 87
  while (i < 20) {
#line 88
    *(hashout + i) = (unsigned char )(ctx->H[i / 4] >> 24);
#line 89
    ctx->H[i / 4] <<= 8;
#line 87
    i ++;
  }

#line 114
  while (t <= 79) {
#line 115
    ctx->W[t] = (uint32 )((long )(((((ctx->W[t - 3] ^ ctx->W[t - 8]) ^ ctx->W[t - 14]) ^ ctx->W[t - 16]) << 1) | ((((ctx->W[t - 3] ^ ctx->W[t - 8]) ^ ctx->W[t - 14]) ^ ctx->W[t - 16]) >> 31)) & 4294967295L);
#line 114
    t ++;
  }

#line 124
  t = 0;
#line 124
  while (t <= 19) {
#line 125
    TEMP = (uint32 )(((((((long )((A << 5) | (A >> 27)) & 4294967295L) + (long )(((C ^ D) & B) ^ D)) + (long )E) + (long )ctx->W[t]) + 1518500249L) & 4294967295L);
#line 126
    E = D;
#line 126
    D = C;
#line 126
    C = (uint32 )((long )((B << 30) | (B >> 2)) & 4294967295L);
#line 126
    B = A;
#line 126
    A = TEMP;
#line 124
    t ++;
  }
#line 128
  t = 20;
#line 128
  while (t <= 39) {
#line 129
    TEMP = (uint32 )(((((((long )((A << 5) | (A >> 27)) & 4294967295L) + (long )((B ^ C) ^ D)) + (long )E) + (long )ctx->W[t]) + 1859775393L) & 4294967295L);
#line 130
    E = D;
#line 130
    D = C;
#line 130
    C = (uint32 )((long )((B << 30) | (B >> 2)) & 4294967295L);
#line 130
    B = A;
#line 130
    A = TEMP;
#line 128
    t ++;
  }
#line 132
  t = 40;
#line 132
  while (t <= 59) {
#line 133
    TEMP = (uint32 )(((((((long )((A << 5) | (A >> 27)) & 4294967295L) + (long )((B & C) | (D & (B | C)))) + (long )E) + (long )ctx->W[t]) + 2400959708L) & 4294967295L);
#line 134
    E = D;
#line 134
    D = C;
#line 134
    C = (uint32 )((long )((B << 30) | (B >> 2)) & 4294967295L);
#line 134
    B = A;
#line 134
    A = TEMP;
#line 132
    t ++;
  }
#line 136
  t = 60;
#line 136
  while (t <= 79) {
#line 137
    TEMP = (uint32 )(((((((long )((A << 5) | (A >> 27)) & 4294967295L) + (long )((B ^ C) ^ D)) + (long )E) + (long )ctx->W[t]) + 3395469782L) & 4294967295L);
#line 138
    E = D;
#line 138
    D = C;
#line 138
    C = (uint32 )((long )((B << 30) | (B >> 2)) & 4294967295L);
#line 138
    B = A;
#line 138
    A = TEMP;
#line 136
    t ++;
  }
#line 567
          while (nn > 0UL) {
#line 567
            tmp___3 = dd;
#line 567
            dd ++;
#line 567
            tmp___4 = ss;
#line 567
            ss ++;
#line 567
            *tmp___3 = (char )*tmp___4;
#line 567
            nn --;
          }


#line 602
      while (1) {
#line 602
        if (! ((int const   )*p == 48)) {
#line 602
          if (! ((int const   )*p == 45)) {
#line 602
            if (! ((int const   )*p == 43)) {
#line 602
              if (! ((int const   )*p == 32)) {
#line 602
                if (! ((int const   )*p == 35)) {
#line 602
                  if (! ((int const   )*p == 39)) {
#line 602
                    break;
                  }
                }
              }
            }
          }
        }
#line 604
        switch ((int const   )*p) {
        case 48: 
#line 605
        zero_padding = 1;
#line 605
        break;
        case 45: 
#line 606
        justify_left = 1;
#line 606
        break;
        case 43: 
#line 607
        force_sign = 1;
#line 607
        space_for_positive = 0;
#line 607
        break;
        case 32: 
#line 608
        force_sign = 1;
#line 614
        break;
        case 35: 
#line 615
        alternate_form = 1;
#line 615
        break;
        case 39: 
#line 616
        break;
        }
#line 618
        p ++;
}


#line 631
          uj = (unsigned int )((int const   )*tmp___7 - 48);
#line 632
          while (1) {
#line 632
            if ((int )*p >= 48) {
#line 632
              if (! ((int )*p <= 57)) {
#line 632
                break;
              }
            } else {
#line 632
              break;
            }
#line 632
            tmp___8 = p;
#line 632
            p ++;
#line 632
            uj = 10U * uj + (unsigned int )((int const   )*tmp___8 - 48);
          }


          #line 654
            uj___0 = (unsigned int )((int const   )*tmp___11 - 48);
#line 655
            while (1) {
#line 655
              if ((int )*p >= 48) {
#line 655
                if (! ((int )*p <= 57)) {
#line 655
                  break;
                }
              } else {
#line 655
                break;
              }
#line 655
              tmp___12 = p;
#line 655
              p ++;
#line 655
              uj___0 = 10U * uj___0 + (unsigned int )((int const   )*tmp___12 - 48);
            }


#line 88
  i = 0;
#line 88
  while ((size_t )i < length) {
#line 89
    *(str2 + i) = *(str + (start + i));
#line 88
    i ++;
  }

#line 101
  i = 0;
#line 101
  while (1) {
#line 101
    tmp___5 = strsep((char ** __restrict  )(& str2), (char const   * __restrict  )separator);
#line 101
    *(*array + i) = tmp___5;
#line 101
    if (! tmp___5) {
#line 101
      break;
    }
#line 102
    tmp___4 = realloc((void *)*array, (unsigned long )(i + 2) * sizeof(char *));
#line 102
    *array = (char **)tmp___4;
#line 101
    i ++;
  }

#line 110
  i = 0;
#line 110
  while (i < len) {
#line 111
    *(dest + (pos + i)) = *(text + i);
#line 110
    i ++;
  }


#line 118
  i = 0;
#line 118
  while (i < pos) {
#line 119
    num2 /= base;
#line 118
    i ++;
  }

#line 128
  i = 0;
#line 128
  while (i < len) {
#line 130
    ch = (int )((unsigned char )*(str + ((len - 1) - i)));
#line 131
    total += ch * m;
#line 132
    m *= 256;
#line 128
    i ++;
  }


#line 140
  x = 0;
#line 140
  while ((int )*(str + x) != 0) {
#line 140
    x ++;
  }


#line 151
  c___0 = 0;
#line 151
  while ((unsigned long )*(strarr + c___0) != (unsigned long )((char *)0)) {
#line 151
    c___0 ++;
  }


#line 159
  i = 0;
#line 159
  while (i < l) {
#line 160
    tmp___1 = strcmp((char const   *)*(*strarr + i), (char const   *)str);
#line 160
    if (tmp___1 == 0) {
#line 162
      free((void *)*(*strarr + i));
#line 163
      *(*strarr + i) = *(*strarr + (l - 1));
#line 164
      *(*strarr + (l - 1)) = (char *)0;
#line 165
      tmp___0 = realloc((void *)*strarr, (unsigned long )l * sizeof(char *));
#line 165
      *strarr = (char **)tmp___0;
#line 166
      return (0);
    }
#line 159
    i ++;
  }

#line 183
  i = 0;
#line 183
  while (i < sI) {
#line 185
    tmp___0 = strcasecmp((char const   *)*(uA + i), (char const   *)uS);
#line 185
    if (tmp___0 == 0) {
#line 185
      return (1);
    }
#line 183
    i ++;
  }


#line 218
  while (1) {
#line 220
    fprintf((FILE * __restrict  )fP, (char const   * __restrict  )"%s\n", *uA);
#line 218
    uA ++;
#line 218
    if (! *uA) {
#line 218
      break;
    }
  }

#line 238
  while (1) {
#line 238
    tmp___4 = feof(fP);
#line 238
    if (tmp___4) {
#line 238
      break;
    }
#line 240
    tmp___0 = realloc((void *)rA, (unsigned long )(i + 1) * sizeof(char *));
#line 240
    rA = (char **)tmp___0;
#line 241
    i2 = 0;
#line 241
    while (1) {
#line 241
      tmp___2 = _IO_getc(fP);
#line 241
      tC = (char )tmp___2;
#line 241
      if ((int )tC != 10) {
#line 241
        if (! ((int )tC != -1)) {
#line 241
          break;
        }
      } else {
#line 241
        break;
      }
#line 243
      tmp___1 = realloc((void *)tA, (unsigned long )(i2 + 1) * sizeof(char ));
#line 243
      tA = (char *)tmp___1;
#line 244
      *(tA + i2) = tC;
#line 241
      i2 ++;
    }
#line 246
    tmp___3 = realloc((void *)tA, (unsigned long )(i2 + 1) * sizeof(char ));
#line 246
    tA = (char *)tmp___3;
#line 247
    *(tA + i2) = (char)0;
#line 248
    if ((int )tC != -1) {
#line 250
      *(rA + i) = tA;
    } else {
#line 254
      free((void *)tA);
#line 255
      *(rA + i) = (char *)0;
    }
#line 257
    tA = (char *)((void *)0);
#line 238
    i ++;
  }


    while (1) {
#line 266
      tmp___1 = len;
#line 266
      len --;
#line 266
      if (! tmp___1) {
#line 266
        break;
      }
#line 267
      tmp = dest;
#line 267
      dest ++;
#line 267
      tmp___0 = src;
#line 267
      src ++;
#line 267
      *tmp = *tmp___0;
    }

#line 272
    while (1) {
#line 272
      tmp___4 = len;
#line 272
      len --;
#line 272
      if (! tmp___4) {
#line 272
        break;
      }
#line 273
      tmp___2 = lastd;
#line 273
      lastd --;
#line 273
      tmp___3 = lasts;
#line 273
      lasts --;
#line 273
      *tmp___2 = *tmp___3;
    }

#line 291
  while ((int )*str != 0) {
#line 292
    if ((int )c___0 == (int )*str) {
#line 293
      return (1);
    }
#line 294
    str ++;
  }
#line 316
  while (1) {
#line 316
    if (! ((int )*p == 10)) {
#line 316
      if (! ((int )*p == 13)) {
#line 316
        break;
      }
    }


#line 360
  while (*str) {
#line 361
    if ((int )*str == (int )fm) {
#line 362
      *str = to;
    }
#line 364
    str ++;
  }


#line 393
  while (1) {
#line 393
    tmp___0 = count;
#line 393
    count --;
#line 393
    if (! (tmp___0 > 0)) {
#line 393
      break;
    }
#line 395
    tmp = to;
#line 395
    to ++;
#line 395
    *tmp = (char)0;
  }


#line 434
  while (1) {
#line 434
    tmp___1 = count;
#line 434
    count --;
#line 434
    if (! (tmp___1 > 0UL)) {
#line 434
      break;
    }
#line 436
    tmp = from;
#line 436
    from ++;
#line 436
    tmp___0 = to;
#line 436
    to ++;
#line 436
    if ((int )*tmp != (int )*tmp___0) {
#line 438
      rtnval = 1;
#line 439
      break;
    }
  }


#line 466
  while (1) {
#line 467
    if ((int const   )*s___0 == (int const   )c___0) {
#line 469
      return ((char *)s___0);
    }
#line 466
    tmp = s___0;
#line 466
    s___0 ++;
#line 466
    if (! *tmp) {
#line 466
      break;
    }
  }


#line 34
  i = 0;
#line 34
  while (i < linecount) {
#line 35
    tmp___5 = strncmp((char const   *)*(lines + i), "Set-Cookie: ", (size_t )12);
#line 35
    if (tmp___5 == 0) {
#line 37
      tmp___1 = strlen((char const   *)*(lines + i));
#line 37
      tmp___2 = substr(*(lines + i), 12, tmp___1 - 13UL);
#line 37
      cookiedata = tmp___2;
#line 39
      split((char *)"; ", cookiedata, & cookie);
#line 40
      free((void *)cookiedata);
#line 41
      tmp___3 = strncmp((char const   *)*(cookie + 0), "Y=", (size_t )2);
#line 41
      if (tmp___3 == 0) {
#line 42
        part1 = *(cookie + 0);
      }
#line 43
      tmp___4 = strncmp((char const   *)*(cookie + 0), "T=", (size_t )2);
#line 43
      if (tmp___4 == 0) {
#line 44
        part2 = *(cookie + 0);
      }
#line 45
      free((void *)cookie);
    }
#line 34
    i ++;
  }
#line 59
  while (1) {
#line 61
    tmp = malloc(16UL * sizeof(char ));
#line 61
    header = (char *)tmp;
#line 65
    tmp___0 = (int )read(socket___0, header, 16);
#line 65
    if (tmp___0 == 0) {
#line 67
      break;
    }
#line 68
    tmp___1 = substr(header, 14, (size_t )2);
#line 68
    tmp___2 = strint(tmp___1, 2);
#line 68
    len = tmp___2;
#line 69
    tmp___3 = malloc((unsigned long )(len + 1) * sizeof(char ));
#line 69
    content = (char *)tmp___3;
#line 70
    bzero((void *)content, (size_t )(len + 1));
#line 71
    tmp___4 = malloc((unsigned long )(len + 1) * sizeof(char ));
#line 71
    part = (char *)tmp___4;
#line 75
    c___0 = (int )read(socket___0, content, len);
#line 77
    while (c___0 < len) {
#line 79
      bzero((void *)part, (size_t )(len + 1));
#line 83
      tmp___5 = (int )read(socket___0, part, len - c___0);
#line 83
      c___0 += tmp___5;
#line 85
      tmp___6 = strlen((char const   *)part);
#line 85
      strncat((char * __restrict  )content, (char const   * __restrict  )part, tmp___6);
    }
#line 87
    free((void *)part);
#line 88
    tmp___7 = substr(header, 10, (size_t )2);
#line 88
    tmp___8 = strint(tmp___7, 2);
#line 88
    yrecvd(tmp___8, content, len);
#line 89
    free((void *)header);
#line 90
    free((void *)content);
  }