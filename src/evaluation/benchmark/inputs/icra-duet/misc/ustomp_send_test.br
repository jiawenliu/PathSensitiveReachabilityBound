#line 972
  __result = (size_t )0;
#line 973
  while (1) {
#line 973
    if ((int const   )*(__s + __result) != 0) {
#line 973
      if (! ((int const   )*(__s + __result) != (int const   )__reject)) {
#line 973
        break;
      }
    } else {
#line 973
      break;
    }
#line 974
    __result ++;
  }



#line 983
  __result = (size_t )0;
#line 984
  while (1) {
#line 984
    if ((int const   )*(__s + __result) != 0) {
#line 984
      if ((int const   )*(__s + __result) != (int const   )__reject1) {
#line 984
        if (! ((int const   )*(__s + __result) != (int const   )__reject2)) {
#line 984
          break;
        }
      } else {
#line 984
        break;
      }
    } else {
#line 984
      break;
    }
#line 986
    __result ++;
  }




#line 996
  __result = (size_t )0;
#line 997
  while (1) {
#line 997
    if ((int const   )*(__s + __result) != 0) {
#line 997
      if ((int const   )*(__s + __result) != (int const   )__reject1) {
#line 997
        if ((int const   )*(__s + __result) != (int const   )__reject2) {
#line 997
          if (! ((int const   )*(__s + __result) != (int const   )__reject3)) {
#line 997
            break;
          }
        } else {
#line 997
          break;
        }
      } else {
#line 997
        break;
      }
    } else {
#line 997
      break;
    }
#line 999
    __result ++;
  }



#line 1048
  __result = (size_t )0;
#line 1050
  while ((int const   )*(__s + __result) == (int const   )__accept) {
#line 1051
    __result ++;
  }



#line 1060
  __result = (size_t )0;
#line 1062
  while (1) {
#line 1062
    if (! ((int const   )*(__s + __result) == (int const   )__accept1)) {
#line 1062
      if (! ((int const   )*(__s + __result) == (int const   )__accept2)) {
#line 1062
        break;
      }
    }
#line 1063
    __result ++;
  }


#line 1072
  __result = (size_t )0;
#line 1074
  while (1) {
#line 1074
    if (! ((int const   )*(__s + __result) == (int const   )__accept1)) {
#line 1074
      if (! ((int const   )*(__s + __result) == (int const   )__accept2)) {
#line 1074
        if (! ((int const   )*(__s + __result) == (int const   )__accept3)) {
#line 1074
          break;
        }
      }
    }
#line 1076
    __result ++;
  }


#line 1126
  while (1) {
#line 1126
    if ((int const   )*__s != 0) {
#line 1126
      if ((int const   )*__s != (int const   )__accept1) {
#line 1126
        if (! ((int const   )*__s != (int const   )__accept2)) {
#line 1126
          break;
        }
      } else {
#line 1126
        break;
      }
    } else {
#line 1126
      break;
    }
#line 1127
    __s ++;
  }



#line 1137
  while (1) {
#line 1137
    if ((int const   )*__s != 0) {
#line 1137
      if ((int const   )*__s != (int const   )__accept1) {
#line 1137
        if ((int const   )*__s != (int const   )__accept2) {
#line 1137
          if (! ((int const   )*__s != (int const   )__accept3)) {
#line 1137
            break;
          }
        } else {
#line 1137
          break;
        }
      } else {
#line 1137
        break;
      }
    } else {
#line 1137
      break;
    }
#line 1139
    __s ++;
  }


  if ((unsigned long )__s == (unsigned long )((void *)0)) {
#line 1176
    __s = *__nextp;
  }
#line 1177
  while ((int )*__s == (int )__sep) {
#line 1178
    __s ++;
  }


#line 1180
  if ((int )*__s != 0) {
#line 1182
    tmp___0 = __s;
#line 1182
    __s ++;
#line 1182
    __result = tmp___0;
#line 1183
    while ((int )*__s != 0) {
#line 1184
      tmp___1 = __s;
#line 1184
      __s ++;
#line 1184
      if ((int )*tmp___1 == (int )__sep) {
#line 1186
        *(__s + -1) = (char )'\000';
#line 1187
        break;
      }
    }
  }


    __cp = __retval;
#line 1238
    while (1) {
#line 1240
      if ((int )*__cp == 0) {
#line 1242
        __cp = (char *)((void *)0);
#line 1243
        break;
      }
#line 1245
      if ((int )*__cp == (int )__reject1) {
#line 1247
        tmp___0 = __cp;
#line 1247
        __cp ++;
#line 1247
        *tmp___0 = (char )'\000';
#line 1248
        break;
      } else
#line 1245
      if ((int )*__cp == (int )__reject2) {
#line 1247
        tmp___0 = __cp;
#line 1247
        __cp ++;
#line 1247
        *tmp___0 = (char )'\000';
#line 1248
        break;
      }
#line 1250
      __cp ++;
    }


#line 65
  while (tries < 10) {
#line 66
    state = ustomp_get_state(conn);
#line 67
    if (state != 128) {
#line 70
      sleep(1U);
    } else {
#line 72
      printf((char const   * __restrict  )"okay, we\'re set!\n");
#line 76
      snprintf((char * __restrict  )(topic), (size_t )80, (char const   * __restrict  )"/topic/%s",
               to);
#line 77
      puts((char const   *)(topic));
#line 79
      headers = treeCreate();
#line 80
      treeDictInsertString(headers, "destination", (char const   *)(topic));
#line 81
      ustomp_set_topic(conn, (char const   *)(topic));
#line 82
      return (0);
    }
#line 65
    tries ++;
  }


#line 105
  i = 0;
#line 105
  while ((unsigned int )i < count) {
#line 106
    ustomp_send_frame_message_v(conn, (char const   *)((char *)myChunk), sizeof(chunkHdr ),
                                "foo", "bar", (void *)0);
#line 107
    write_count(i);
#line 105
    i ++;
  }


#line 116
  i = 0;
#line 116
  while ((unsigned int )i < count) {
#line 117
    j = 1000;
#line 117
    while (1) {
#line 117
      tmp___0 = j;
#line 117
      j --;
#line 117
      if (! tmp___0) {
#line 117
        break;
      }
#line 118
      ustomp_send_frame_message_v(conn, (char const   *)((char *)myChunk), sizeof(chunkHdr ),
                                  "foo", "bar", (void *)0);
#line 117
      t ++;
    }
#line 119
    sleep(1U);
#line 120
    write_count(t);
#line 116
    i ++;
  }


#line 127
  i = 0;
#line 127
  while ((unsigned int )i < count) {
#line 128
    ustomp_send_frame_message_v(conn, (char const   *)((char *)myChunk), sizeof(chunkHdr ),
                                "foo", "bar", (void *)0);
#line 129
    sleep(1U);
#line 130
    write_count(i);
#line 127
    i ++;
  }



#line 142
  i = 0;
#line 142
  while (i < argc) {
#line 143
    printf((char const   * __restrict  )"%i) ", i + 1);
#line 144
    puts((char const   *)(item + i)->string);
#line 142
    i ++;
  }



#line 248
  while (1) {
#line 248
    if (*t_readerPos == buf->writer) {
#line 248
      if (! (! g_stopthread)) {
#line 248
        break;
      }
    } else {
#line 248
      break;
    }
#line 249
    pthread_cond_wait((pthread_cond_t * __restrict  )(& buf->buf_con), (pthread_mutex_t * __restrict  )(& buf->buf_mutex));
#line 250
    *t_writerPos = buf->writer;
  }



#line 269
  while (1) {
#line 269
    if ((unsigned long )*p == (unsigned long )(buf->buffer + buf->writer)) {
#line 269
      if (! (! g_stopthread)) {
#line 269
        break;
      }
    } else {
#line 269
      break;
    }
#line 270
    pthread_cond_wait((pthread_cond_t * __restrict  )(& buf->buf_con), (pthread_mutex_t * __restrict  )(& buf->buf_mutex));
#line 271
    *t_writerPos = buf->writer;
  }


#line 320
  flags = 0;
#line 328
  while (1) {
#line 328
    __asm__  volatile   ("cld; rep; "
                         "stosq": "=c" (__d0), "=D" (__d1): "a" (0), "0" (sizeof(fd_set ) / sizeof(__fd_mask )),
                         "1" (& fds.__fds_bits[0]): "memory");
#line 328
    break;
  }




#line 467
    writerPos = buffer->writer;
#line 468
    readerPos = buffer->reader;
#line 469
    while (1) {
#line 469
      if (writerPos == readerPos) {
#line 469
        if (! (! g_stopthread)) {
#line 469
          break;
        }
      } else {
#line 469
        break;
      }
#line 471
      pthread_cond_wait((pthread_cond_t * __restrict  )(& buffer->buf_con), (pthread_mutex_t * __restrict  )(& buffer->buf_mutex));
#line 472
      writerPos = buffer->writer;
    }
#line 474
    pthread_mutex_unlock(& buffer->buf_mutex);
#line 476
    p = buffer->buffer + readerPos;
#line 476
    start = p;
#line 484
    while ((int )*p != 10) {
#line 485
      if ((int )*p == 0) {
#line 488
        return ((ustomp_message *)((void *)0));
      }
#line 484
      p = stepThroughBuffer(& readerPos, & writerPos, buffer);
    }


#line 848
    _port[0] = (char)0;
#line 848
    tmp___1 = 1U;
#line 848
    while (! (tmp___1 >= 8U)) {
#line 848
      _port[tmp___1] = (char)0;
#line 848
      tmp___1 ++;
    }


#line 1092
  sent = 0;
#line 1093
  left = *len;
#line 1094
  result = 0;
#line 1096
  while (sent < *len) {
#line 1097
    tmp___0 = send(sockfd, (void const   *)(buf + sent), (size_t )left, 0);
#line 1097
    result = (int )tmp___0;
#line 1098
    if (result == -1) {
#line 1099
      break;
    } else
#line 1100
    if (! (result == 0)) {
#line 1103
      sent += result;
#line 1104
      left -= result;
    }
  }


#line 1198
  buffer[0] = (char)0;
#line 1198
  tmp___0 = 1U;
#line 1198
  while (! (tmp___0 >= 65536U)) {
#line 1198
    buffer[tmp___0] = (char)0;
#line 1198
    tmp___0 ++;
  }


#line 1198
  buffer[0] = (char)0;
#line 1198
  tmp___0 = 1U;
#line 1198
  while (! (tmp___0 >= 65536U)) {
#line 1198
    buffer[tmp___0] = (char)0;
#line 1198
    tmp___0 ++;
  }


#line 223
  node = tree->root;
#line 225
  while (node) {
#line 227
    if (node->key == key) {
#line 228
      return (node->data);
    }
#line 230
    node = node->link[node->key < key];
  }


#line 403
    tmp___0 = 1U;
#line 403
    while (! (tmp___0 >= 64U)) {
#line 403
      fmt[tmp___0] = (char)0;
#line 403
      tmp___0 ++;
    }


#line 410
    while (i < level) {
#line 411
      fprintf((FILE * __restrict  )fd, (char const   * __restrict  )"  ");
#line 410
      i ++;
    }



#line 601
    q = head;
#line 602
    p = (RBnode *)((void *)0);
#line 602
    g = p;
#line 603
    t1 = tree->root;
#line 604
    q->link[1] = t1;
#line 607
    while (1) {
#line 609
      t1___0 = q->link[dir];
#line 612
      if (! t1___0) {
#line 613
        break;
      }
#line 615
      last = dir;
#line 618
      g = p;
#line 618
      p = q;
#line 619
      q = t1___0;
#line 620
      dir = q->key < key;
#line 623
      if (q->key == key) {
#line 624
        found = q;
      }
#line 627
      tmp___10 = is_red(q);
#line 627
      if (! tmp___10) {
#line 627
        tmp___11 = is_red(q->link[dir]);
#line 627
        if (! tmp___11) {
#line 629
          tmp___9 = is_red(q->link[! dir]);
#line 629
          if (tmp___9) {
#line 633
            tmp___1 = treeRotate(q, dir);
#line 633
            t2 = tmp___1;
#line 634
            p->link[last] = t2;
#line 635
            p = t2;
          } else {
#line 637
            tmp___8 = is_red(q->link[! dir]);
#line 637
            if (! tmp___8) {
#line 638
              s = p->link[! last];
#line 640
              if ((unsigned long )s != (unsigned long )((void *)0)) {
#line 642
                tmp___6 = is_red(s->link[! last]);
#line 642
                if (tmp___6) {
                  _L: /* CIL Label */ 
#line 652
                  dir2 = (unsigned long )g->link[1] == (unsigned long )p;
#line 654
                  tmp___5 = is_red(s->link[last]);
#line 654
                  if (tmp___5) {
#line 658
                    tmp___2 = treeDoubleRotate(p, last);
#line 658
                    t3 = tmp___2;
#line 659
                    g->link[dir2] = t3;
                  } else {
#line 661
                    tmp___4 = is_red(s->link[! last]);
#line 661
                    if (tmp___4) {
#line 665
                      tmp___3 = treeRotate(p, last);
#line 665
                      t3___0 = tmp___3;
#line 666
                      g->link[dir2] = t3___0;
                    }
                  }
#line 670
                  q->red = 1;
#line 671
                  (g->link[dir2])->red = 1;
#line 672
                  v1 = g->link[dir2];
#line 674
                  (v1->link[0])->red = 0;
#line 675
                  (v1->link[1])->red = 0;
                } else {
#line 642
                  tmp___7 = is_red(s->link[last]);
#line 642
                  if (tmp___7) {
#line 642
                    goto _L;
                  } else {
#line 645
                    p->red = 0;
#line 646
                    s->red = 1;
#line 647
                    q->red = 1;
                  }
                }
              }
            }
          }
        }
      }
    }


#line 601
    q = head;
#line 602
    p = (RBnode *)((void *)0);
#line 602
    g = p;
#line 603
    t1 = tree->root;
#line 604
    q->link[1] = t1;
#line 607
    while (1) {
#line 609
      t1___0 = q->link[dir];
#line 612
      if (! t1___0) {
#line 613
        break;
      }
#line 615
      last = dir;
#line 618
      g = p;
#line 618
      p = q;
#line 619
      q = t1___0;
#line 620
      dir = q->key < key;
#line 623
      if (q->key == key) {
#line 624
        found = q;
      }
#line 627
      tmp___10 = is_red(q);
#line 627
      if (! tmp___10) {
#line 627
        tmp___11 = is_red(q->link[dir]);
#line 627
        if (! tmp___11) {
#line 629
          tmp___9 = is_red(q->link[! dir]);
#line 629
          if (tmp___9) {
#line 633
            tmp___1 = treeRotate(q, dir);
#line 633
            t2 = tmp___1;
#line 634
            p->link[last] = t2;
#line 635
            p = t2;
          } else {
#line 637
            tmp___8 = is_red(q->link[! dir]);
#line 637
            if (! tmp___8) {
#line 638
              s = p->link[! last];
#line 640
              if ((unsigned long )s != (unsigned long )((void *)0)) {
#line 642
                tmp___6 = is_red(s->link[! last]);
#line 642
                if (tmp___6) {
                  _L: /* CIL Label */ 
#line 652
                  dir2 = (unsigned long )g->link[1] == (unsigned long )p;
#line 654
                  tmp___5 = is_red(s->link[last]);
#line 654
                  if (tmp___5) {
#line 658
                    tmp___2 = treeDoubleRotate(p, last);
#line 658
                    t3 = tmp___2;
#line 659
                    g->link[dir2] = t3;
                  } else {
#line 661
                    tmp___4 = is_red(s->link[! last]);
#line 661
                    if (tmp___4) {
#line 665
                      tmp___3 = treeRotate(p, last);
#line 665
                      t3___0 = tmp___3;
#line 666
                      g->link[dir2] = t3___0;
                    }
                  }
#line 670
                  q->red = 1;
#line 671
                  (g->link[dir2])->red = 1;
#line 672
                  v1 = g->link[dir2];
#line 674
                  (v1->link[0])->red = 0;
#line 675
                  (v1->link[1])->red = 0;
                } else {
#line 642
                  tmp___7 = is_red(s->link[last]);
#line 642
                  if (tmp___7) {
#line 642
                    goto _L;
                  } else {
#line 645
                    p->red = 0;
#line 646
                    s->red = 1;
#line 647
                    q->red = 1;
                  }
                }
              }
            }
          }
        }
      }
    }



#line 97
  fprintf((FILE * __restrict  )f, (char const   * __restrict  )"\033[0m\n");
#line 99
  i = 0;
#line 99
  while ((unsigned int )i < len) {
#line 101
    fprintf((FILE * __restrict  )f, (char const   * __restrict  )"0x%08lx   ", (unsigned long )ptr - base);
#line 102
    j = 0;
#line 102
    while ((unsigned int )j < width) {
#line 103
      setColor(f, ptr, j, base);
#line 105
      if ((unsigned int )(i + j) < len) {
#line 106
        if ((unsigned int )j % columnwidth == columnwidth - 1U) {
#line 106
          tmp___0 = " ";
        } else {
#line 106
          tmp___0 = "";
        }
#line 106
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )"%02X %s", (int )*(ptr + j),
                tmp___0);
      } else {
#line 108
        if ((unsigned int )j % columnwidth == columnwidth - 1U) {
#line 108
          tmp___1 = " ";
        } else {
#line 108
          tmp___1 = "";
        }
#line 108
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )"   %s", tmp___1);
      }
#line 110
      fprintf((FILE * __restrict  )f, (char const   * __restrict  )"\033[0m");
#line 102
      j ++;
    }
#line 112
    fprintf((FILE * __restrict  )f, (char const   * __restrict  )" ");
#line 113
    j = 0;
#line 113
    while ((unsigned int )j < width) {
#line 114
      setColor(f, ptr, j, base);
#line 116
      if ((unsigned int )(i + j) < len) {
#line 117
        if ((unsigned int )j % columnwidth == columnwidth - 1U) {
#line 117
          tmp___2 = " ";
        } else {
#line 117
          tmp___2 = "";
        }
#line 117
        tmp___3 = printableHex(*(ptr + j));
#line 117
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )"%c%s", (int )tmp___3,
                tmp___2);
      } else {
#line 119
        if ((unsigned int )j % columnwidth == columnwidth - 1U) {
#line 119
          tmp___4 = " ";
        } else {
#line 119
          tmp___4 = "";
        }
#line 119
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )" %s", tmp___4);
      }
#line 121
      fprintf((FILE * __restrict  )f, (char const   * __restrict  )"\033[0m");
#line 113
      j ++;
    }
#line 124
    if (twice != 0) {
#line 126
      fprintf((FILE * __restrict  )f, (char const   * __restrict  )"    0x%08lx   ",
              ((unsigned long )ptr - base) + (unsigned long )len);
#line 127
      j = 0;
#line 127
      while ((unsigned int )j < width) {
#line 128
        setColor(f, ptr, (int )((unsigned int )j + len), base);
#line 130
        if ((unsigned int )(i + j) + len < (unsigned int )frontier) {
#line 131
          if (((unsigned int )j + len) % columnwidth == columnwidth - 1U) {
#line 131
            tmp___5 = " ";
          } else {
#line 131
            tmp___5 = "";
          }
#line 131
          fprintf((FILE * __restrict  )f, (char const   * __restrict  )"%02X %s",
                  (int )*(ptr + ((unsigned int )j + len)), tmp___5);
        } else {
#line 133
          if (((unsigned int )j + len) % columnwidth == columnwidth - 1U) {
#line 133
            tmp___6 = " ";
          } else {
#line 133
            tmp___6 = "";
          }
#line 133
          fprintf((FILE * __restrict  )f, (char const   * __restrict  )"   %s", tmp___6);
        }
#line 135
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )"\033[0m");
#line 127
        j ++;
      }
#line 137
      fprintf((FILE * __restrict  )f, (char const   * __restrict  )" ");
#line 138
      j = 0;
#line 138
      while ((unsigned int )j < width) {
#line 139
        setColor(f, ptr, (int )((unsigned int )j + len), base);
#line 141
        if ((unsigned int )(i + j) + len < (unsigned int )frontier) {
#line 142
          if (((unsigned int )j + len) % columnwidth == columnwidth - 1U) {
#line 142
            tmp___7 = " ";
          } else {
#line 142
            tmp___7 = "";
          }
#line 142
          tmp___8 = printableHex(*(ptr + ((unsigned int )j + len)));
#line 142
          fprintf((FILE * __restrict  )f, (char const   * __restrict  )"%c%s", (int )tmp___8,
                  tmp___7);
        }
#line 144
        fprintf((FILE * __restrict  )f, (char const   * __restrict  )"\033[0m");
#line 138
        j ++;
      }
    }
#line 147
    fprintf((FILE * __restrict  )f, (char const   * __restrict  )"\n");
#line 99
    i = (int )((unsigned int )i + width);
#line 99
    ptr += width;
  }




