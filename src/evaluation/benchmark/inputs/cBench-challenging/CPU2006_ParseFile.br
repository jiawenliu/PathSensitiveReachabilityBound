//taken from cactusADM/src/Cactus/ParseFile.c 	ParseFile

random();

//O(n)
void ParseFile(FileSize, BUF_SZ)
{
  [num_errors <- 0];
  [intoken <- 0]; 
  [inval <- 0];
  [lineno <- 0];
  while [ < (c, FileSize) ]
  {
      [ c <- + ( c, 1 ) ]
    while [ < (c, FileSize) ] do
    {
        [ c <- + ( c, 1 ) ]
      while [ && (< (c, FileSize), rand) ] do
      {
      [ c <- + ( c, 1 ) ]
      }
      [ lineno <- + ( lineno, 1 ) ]
      [ c <- + ( c, 1 ) ]
    }

    if [ rand ] 
    then 
    {
      if(intoken)
      then 
      {
    	  [ num_errors <- + (num_errors, 1)];
        [intoken <- 0];
      }
      [ lineno <- + ( lineno, 1 ) ]
    }
    else { [ skip ] }
    if [== (intoken , true )]
    then
    {
     [ intoken <- + (intoken, 1) ]
      if [ > (intoken, BUF_SZ) ]
      then {return;}
      else { [ skip ] }
    }
    else { [ skip ] }
    if [ rand ]
    then 
    {
      [ intoken <- 0 ];
      [ intoken <- + (intoken, 1) ]
    }
    else { [ skip ] }
    if [ rand ]
    then 
    {
      if [== (intoken , true )]
      then 
      {
        [intoken <- 0];
        [inval <- 0];
        [i <- intoken];
        while [ > (i, 0) ] do
        {
          [ i <- - ( i, 1 ) ]
        }
        [ ntokens <- 1 ];
        [ll <- intoken ];
        while [ > (ll, 0) ] do
        {
          [ ll <- - ( ll, 1 ) ]
          if [ rand ] 
          then 
          { [ntokens <- + (ntokens, 1)] }
          else { [ skip ] }
        }
        while [ < (c, FileSize) ] do
        {
          [ c <- + ( c, 1 ) ]
          [ lineno <- + ( lineno, 1 ) ]
        }

        if [ rand ]
        then {
          [p <- 0];
          if (ntokens > 1)
          {
            return;
          }
          else { [ skip ] }
          while [ < (c, FileSize) ] do
          { [ c <- + ( c, 1 ) ]
            [ p <- + ( p, 1 ) ]
            [ lineno <- + ( lineno, 1 ) ]
            if [ > (p, BUF_SZ) ] then 
            {
            return;
            }
            else { [ skip ] }
          }
        }
        else 
        {   if [ rand ]
            then {
                  while [ < (c,  FileSize)] do
                  {
                    [ c <- + ( c, 1 ) ]
                  }
        
                }
            else { [ skip ] }
        }
        else
        {
          [p <- 0];
          [ p <- + ( p, 1 ) ]
          if (ntokens == 1)
          {
            [ c <- + ( c, 1 ) ]

            while (c < FileSize)
            {
              [ p <- + ( p, 1 ) ]
              if[ > (p, BUF_SZ) ] 
              then {return;}
              else { [ skip ] }
              [ c <- + ( c, 1 ) ]

            }

            [ lineno <- + ( lineno, 1 ) ]
          }
          else
          {
            [ ncommas <- 0 ];
            [ pp <- 0 ]
            [ pp <- + ( pp, 1 ) ]
            [ c <- + ( c, 1 ) ]
            while [ && ( < (ncommas, ntokens-1),  <  (c, FileSize))]
            do 
            {
              [ pp <- + ( pp, 1 ) ]
              if [ > (pp, BUF_SZ) ]
              then { return }
              else { [ skip ] }
              [ ncommas <- + (ncommas, 1) ];
              [ c <- + ( c, 1 ) ]
            }
              while [ < (c, FileSize) ] do
              {
                [ c <- + ( c, 1 ) ]
                [ lineno <- + ( lineno, 1 ) ]
              }
            [ pp <- + ( pp, 1 ) ]
            
            if[ > (p, BUF_SZ) ] then 
              then { return }
              else { [ skip ] }

            [ c <- + ( c, 1 ) ]

            while (c < FileSize && random())
            {
              [ pp <- + ( pp, 1 ) ]
              if[ > ( pp, BUF_SZ ) ] 
              then { return }
              else { [ skip ] }

              [ c <- + ( c, 1 ) ]
            }

            [pt <- 0];
            [pv <- 0];
            [i <- ncommas];
          while [ > (i, 0) ] do
        {
            [ i <- - ( i, 1 ) ]            
            [ pp <- 0];
              while [ rand ] do
              {
                [ pp <- + ( pp, 1 ) ]
                [ pt <- + (pt, 1) ]
                if[ > ( pp, BUF_SZ ) ] 
                then { return }
              else { [ skip ] }
              }
              [pp <- 0];
              while [ rand ] do
              {
            	  [ pp <- + ( pp, 1 ) ]
            	  [ pv <- + ( pv, 1 ) ]
            	  if[ > ( pp, BUF_SZ ) ] 
                then { return }
                else { [ skip ] }
              }
              [ pv <- + ( pv, 1 ) ]; 
              [ pt <- + (pt, 1) ]
            }
            [pp <- 0];
            while [ rand ] do
            {
                [ pp <- + ( pp, 1 ) ]
                [ pt <- + (pt, 1) ]
                if[ > ( pp, BUF_SZ ) ]
                then { return }
                else { [ skip ] }
            }
            [pp <- 0];
            while [ rand ] do
            {
              [ pp <- + ( pp, 1 ) ]
              if [ > ( pp, BUF_SZ ) ] 
              then { return }
              else { [ skip ] }
              [ pv <- + ( pv, 1 ) ]
            }
          }
        }
      }
    }
  }

}
